@page "/Account/Login"

@inherits LayoutComponentBase

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BuildMasterPro.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<MudPopoverProvider />
<MudDialogProvider />
<MudThemeProvider />

<PageTitle>Log in</PageTitle>

<div class="login-container">

    <!-- External Navigation Bar -->
    <div class="navbar-container">
        <BuildMasterPro.Components.Layout.ExternalNavBar/>
    </div>

    <!--Error Message Display-->
    @* <StatusMessage Message="@errorMessage"/> *@
    @* <hr/> *@

    <main>
        <!--Login Form-->
        <div class="login-box">

            <section>
                <h2 class="text-center" style="color: #5A3E9F; font-size: 35px; text-align: center;">Welcome Back</h2>
                <p class="text-center mb-6 pt-1" style="font-size: 12px; text-align: center;">Login to proceed and access your construction project management tools, tasks, and more.</p>

                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">

                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />

                    <!--Email Field-->
                    <div class="form-group">
                        @* <label for="email" class="form-label">Email:</label> *@
                        @* <MudTextField ShrinkLabel Label="Email" @bind-Value="Input.Email" Variant="Variant.Outlined" Margin=Margin.Dense
                                 autocomplete="username" aria-required="true" For="(() => Input.Email)"></MudTextField> *@
                        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="Email"/>
                        <ValidationMessage For="() => Input.Email" class="text-danger" style="font-size: 12px; color: #DC0000;" />
                    </div>


                    <!--Password Field-->
                    <div class="form-group mt-3">
                        @* <label for="password" class="form-label" style="text-align:left; font-weight: bold;">Password:</label> *@
                        @* <MudTextField ShrinkLabel type="password" Label="Password" @bind-Value="Input.Password" Variant="Variant.Outlined"
                                Margin=Margin.Dense autocomplete="current-password" aria-required="true" For="(() => Input.Password)"></MudTextField> *@
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Password" />
                        <ValidationMessage For="() => Input.Password" class="text-danger" style="font-size: 12px; color: #DC0000;" />
                    </div>

                    @* Forgot Password Hyperlink *@
                    <div class="mb-3">
                        <p style="font-size: 11px; text-align: end;">
                            <a href="Account/ForgotPassword" style="color: #9068F2;">Forgot your password?</a>
                        </p>
                    </div>

                    <!--Login Button-->
                    <div>
                        <button type="submit" class="button" style="font-weight: bold;">Login</button>
                    </div>

                    <!--Checkbox Button-->
                    <div class="checkbox mb-3 d-inline-flex mt-2">
                        <div>
                            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" style="height: 15px; padding-top: 5px;" />
                        </div>
                        <label class="form ml-1" style="font-size: 12px; padding-bottom: 5px;">
                            Remember me
                        </label>
                    </div>

                    <!--Don't Have an Account-->
                    <div>
                        <p style="font-size: 12px; font-weight: 500; text-align: center;">
                            Don't have an account? <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" style="color: #9068F2;">SignUp</a>
                        </p>
                        @* <p> *@
                        @*     <a href="Account/ResendEmailConfirmation">Resend email confirmation</a> *@
                        @* </p> *@
                    </div>


                </EditForm>

            </section>
        </div>
    </main>

    @* <div class="col-md-6 col-md-offset-2"> *@
    @*     <section> *@
    @*         <h3>Use another service to log in.</h3> *@
    @*         <hr /> *@
    @*         <ExternalLoginPicker /> *@
    @*     </section> *@
    @* </div> *@

    @* <div class="patterns justify-content-between"> *@
    @*     <img src="/GenGroup.png" alt="rectangular-pattern" class="decor-imageleft"/> *@
    @*     <img src="/GenGroup.png" alt="rectangular-pattern" class="decor-imageright" /> *@
    @* </div> *@

</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser(EditContext context)
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
