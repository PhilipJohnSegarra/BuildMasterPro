@page "/Account/Register"

@inherits LayoutComponentBase

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BuildMasterPro.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<MudPopoverProvider />
<MudDialogProvider />
<MudThemeProvider />

<PageTitle>Register</PageTitle>

<div class="signup-container">
    
    <!-- External Navigation Bar -->
    <div class="navbar-container">
        <BuildMasterPro.Components.Layout.ExternalNavBar />
    </div>

    <!--Error Message Display-->
    @* <StatusMessage Message="@errorMessage"/> *@
    @* <hr/> *@

    <main>
        <!--SignUp Form-->
        <div class="signup-box">

            <section>
                <h2 class="text-center" style="color: #5A3E9F; font-size: 35px; text-align: center;">Welcome Back</h2>
                <p class="text-center mb-6 pt-1" style="font-size: 12px; text-align: center;">Login to proceed and access your construction project management tools, tasks, and more.</p>

                <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">

                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />

                    <!--Email Field-->
                    <div class="form-floating mb-3">
                        @* <label for="email">Email</label> *@
                        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <ValidationMessage For="() => Input.Email" class="text-danger" style="font-size: 12px; color: #DC0000;" />
                    </div>

                    <!--Password Field-->
                    <div class="form-floating mb-3">
                        @* <label for="password">Password</label> *@
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                        <ValidationMessage For="() => Input.Password" class="text-danger" style="font-size: 12px; color: #DC0000;" />
                    </div>

                    <!--ConfirmPassword Field-->
                    <div class="form-floating mb-3">
                        @* <label for="confirm-password">Confirm Password</label> *@
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" style="font-size: 12px; color: #DC0000;" />
                    </div>

                    <button type="submit" class="button" style="font-weight: bold;">Register</button>

                    <!--Already Have an Account-->
                    <div>
                        <p style="font-size: 12px; font-weight: 500; text-align: center;">
                            Already have an account? <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" style="color: #9068F2;">Login</a>
                        </p>
                    </div>

                </EditForm>
            </section>

        </div>

    </main>

    @* <div class="col-md-6 col-md-offset-2"> *@
    @*     <section> *@
    @*         <h3>Use another service to register.</h3> *@
    @*         <hr /> *@
    @*         <ExternalLoginPicker /> *@
    @*     </section> *@
    @* </div> *@

</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}