@page "/equipment/create"
@using Microsoft.EntityFrameworkCore
@using BuildMasterPro.Data
@inject IDbContextFactory<BuildMasterPro.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Equipment</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Equipment" OnValidSubmit="AddEquipment" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Equipment.Name" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Equipment.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Equipment.Description" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Equipment.Description" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="costperhour" class="form-label">CostPerHour:</label> 
                <InputNumber id="costperhour" @bind-Value="Equipment.CostPerHour" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Equipment.CostPerHour" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="status" class="form-label">Status:</label> 
                <InputText id="status" @bind-Value="Equipment.Status" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Equipment.Status" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdat" class="form-label">CreatedAt:</label> 
                <InputDate id="createdat" @bind-Value="Equipment.CreatedAt" class="form-control" /> 
                <ValidationMessage For="() => Equipment.CreatedAt" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedat" class="form-label">UpdatedAt:</label> 
                <InputDate id="updatedat" @bind-Value="Equipment.UpdatedAt" class="form-control" /> 
                <ValidationMessage For="() => Equipment.UpdatedAt" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/equipment">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Equipment Equipment { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddEquipment()
    {
        using var context = DbFactory.CreateDbContext();
        context.Equipments.Add(Equipment);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/equipment");
    }
}
