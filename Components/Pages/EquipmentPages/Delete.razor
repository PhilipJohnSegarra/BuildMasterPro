@page "/equipment/delete"
@using Microsoft.EntityFrameworkCore
@using BuildMasterPro.Data
@inject IDbContextFactory<BuildMasterPro.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Equipment</h2>
    <hr />
    @if (equipment is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@equipment.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@equipment.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CostPerHour</dt>
            <dd class="col-sm-10">@equipment.CostPerHour</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@equipment.Status</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedAt</dt>
            <dd class="col-sm-10">@equipment.CreatedAt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedAt</dt>
            <dd class="col-sm-10">@equipment.UpdatedAt</dd>
        </dl>
        <EditForm method="post" Model="equipment" OnValidSubmit="DeleteEquipment" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(equipment is null)">Delete</button> |
            <a href="/equipment">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Equipment? equipment;

    [SupplyParameterFromQuery]
    private int EquipmentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        equipment = await context.Equipments.FirstOrDefaultAsync(m => m.EquipmentId == EquipmentId);

        if (equipment is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteEquipment()
    {
        using var context = DbFactory.CreateDbContext();
        context.Equipments.Remove(equipment!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/equipment");
    }
}
