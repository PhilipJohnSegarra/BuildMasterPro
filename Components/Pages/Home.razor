@page "/"
@rendermode InteractiveServer
@using System.ComponentModel
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BuildMasterPro.Data
@using BuildMasterPro.Services
@using BuildMasterPro.Components.Pages.ProjectPages
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavManager
@inject ProjectService ProjectService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject UserService userService

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<BuildMasterPro.Components.Pages.ProjectPages.Index />



@code {

    // protected override void OnInitialized()
    // {
    //     db = DbFactory.CreateDbContext();
    // }
    private ApplicationUser? CurrentUser { get; set; } = new();
    private AuthenticationState? authState;
    protected override async Task OnInitializedAsync()
    {
        ProjectService.PropertyChanged += HandlePropertyChanged;
        ProjectService.RegisterListener(StateHasChanged);
        await ProjectService.GetProjectsAsync();
    }
    private void HandlePropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(ProjectService.CurrentProject))
        {
            InvokeAsync(StateHasChanged); // Trigger re-render
        }
    }
    async Task GoToProject(Project proj)
    {
        await ProjectService.SetCurrentProjectAsync(proj);
        NavManager.NavigateTo($"projects/details?projectid={ProjectService.CurrentProject.ProjectId}");
        
    }
    public void Dispose()
    {
        ProjectService.PropertyChanged -= HandlePropertyChanged;
        ProjectService.UnregisterListener(StateHasChanged);
    }
}
