@using BuildMasterPro.Data
@using BuildMasterPro.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject TaskActivityService taskActService
@inject ProjectTaskService taskService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavManager
@inject BlobStorageService blobService
@inject TaskActivityImagesService imageService
@inject ISnackbar snackbar

<MudDialog Class="blur dialog-background" TitleClass="blur PrimaryBG MainText" ContentClass="MainBG py-10" ActionsClass="dialog-background-surface">
    <TitleContent>
        New Activity
    </TitleContent>
    <DialogContent>
        <MudNumericField @bind-Value="ProgressValue" Label="Add to Progress" Variant="Variant.Outlined" Min="-100" Max="100" />
        <MudForm Model="taskActivity">
            <MudTextField Variant="Variant.Outlined" Placeholder="Title" @bind-Value="taskActivity.Name" Class="mb-1"/>
            <MudTextField Variant="Variant.Outlined" Placeholder="Write something..." Lines="5" @bind-Value="taskActivity.Content"/>
            <MudItem lg="12">
                <MudFileUpload Class="pt-3" T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles" Accept=".png, .jpg">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload">
                            Upload Images
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
            </MudItem>
            @if (files != null)
            {
                <MudItem lg="12">
                    <MudList T="string">
                        @foreach (var file in files)
                        {
                            <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                                @file.Name <code>@file.Size bytes</code>
                            </MudListItem>
                        }
                    </MudList>
                </MudItem>
            }
            
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .blur {
        backdrop-filter: blur(10px);
    }

    .dialog-background {
        background-color: transparent;
    }

    .dialog-background-title {
        background: rgb(from var(--mud-palette-info-lighten) r g b / 50%);
        color: var(--mud-palette-white);
    }

    .dialog-background-surface {
        background: rgb(from var(--mud-palette-surface) r g b / 75%);
    }
</style>

@code {
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public int? TaskID { get; set; } = new();
    private ProjectTask Currenttask { get; set; } = new();

    private ApplicationUser? CurrentUser { get; set; }
    private AuthenticationState? authState;

    private TaskActivity taskActivity { get; set; } = new();
    private int ProgressValue = 0;

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        CurrentUser = await UserManager.GetUserAsync(authState.User);
        Currenttask = await taskService.GetTaskAsync((int)TaskID!);
    }

    private async Task Submit()
    {
        if (string.IsNullOrEmpty(taskActivity.Name))
        {
            snackbar.Add("Activity Title should not be empty", severity: Severity.Error);
            return;
        }
        taskActivity.TaskId = TaskID;
        taskActivity.ActivityUserId = CurrentUser.Id;
        if((Currenttask.Progress + ProgressValue) < 100)
        {
            Currenttask.Progress += ProgressValue;
            if(Currenttask.Status == "Not Started")
            {
                Currenttask.Status = "In Progress";
                Currenttask.ActualStartDate = DateTime.UtcNow;
            }
            else if(Currenttask.Progress < 100 && Currenttask.Status != "In Progress" || Currenttask.Status != "Not Started")
            {
                Currenttask.Status = "In Progress";
            }

        }
        else
        {
            Currenttask.Progress = 100;
            Currenttask.Status = "Finished";
            if (Currenttask.ActualStartDate == null) Currenttask.ActualStartDate = DateTime.UtcNow;
            Currenttask.ActualEndDate = DateTime.UtcNow;
        }
        await taskService.UpdateProjectTaskAsync(Currenttask);
        await taskActService.Add(taskActivity);

        if(files != null)
        {
            var taskActImages = new TaskActivityImages();
            taskActImages.TaskActivityID = taskActivity.Id;
            taskActImages.TaskID = Currenttask.TaskId;
            foreach (var file in files)
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 5000000); // ✅ Correct way to get Stream
                string imageUrl = await blobService.UploadFileAsync(stream, file.Name, file.ContentType); // Upload to Azure
                taskActImages.ImageArray.Add(imageUrl);
            }
            await imageService.Insert(taskActImages);
        }
        

        MudDialog!.Close(DialogResult.Ok(taskActivity));
        NavManager.NavigateTo($"projecttasks/details?taskid={TaskID}", forceLoad:true);
    }

    private void Cancel() => MudDialog!.Cancel();

    //File upload Section
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        this.files = new List<IBrowserFile>();
        foreach (var file in files)
        {
            this.files.Add(file);
        }
        //TODO upload the files to the server
    }

    private void UploadFiles2(IBrowserFile file)
    {
        files.Add(file);
        //TODO upload the files to the server
    }
}

