@page "/users"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore
@using BuildMasterPro.Data
@using Microsoft.AspNetCore.Components
@inject NavigationManager NM
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Net.Http.Json
@inject HttpClient httpClient

<MudPopoverProvider />
<MudDialogProvider />
<MudThemeProvider />

<div Class="d-flex flex-row justify-space-between align-center mb-2" Style="width:100%;border:none;background-color:none;">
    <div>
        <p style="font-size:medium">Users</p>
    </div>
    <div>
        <a href="user/create">Add User</a>
    </div>
</div>
<MudDataGrid T="ApplicationUser" Items="@ColUsers" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
              CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
             Bordered="false" Dense="false" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)" Class="MainBG" Style="border:1px solid gray;border-radius:3px;overflow:auto;" Hover="true" RowClick="GoToUserDetails">
    <Columns>
        <TemplateColumn>
            <CellTemplate>
                <MudAvatar>
                    <MudImage Src="@context.Item.ProfilePictureUrl"/>
                </MudAvatar>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Full Name">
            <CellTemplate>
                <MudText><span>@context.Item.LastName</span>, <span>@context.Item.FirstName</span> <span>@context.Item.MiddleMName</span></MudText>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Email" Title="Email" CellClass="row" />
        <PropertyColumn Property="x => x.Phone" CellClass="row" />
        <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end action-column" StickyRight="true">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => NM.NavigateTo($"/user/edit?userid={context.Item.Id}"))" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(async()=>OnDeleteClicked(context.Item))" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ApplicationUser" />
    </PagerContent>
</MudDataGrid>

<style>
    /* Hide the action column by default */
    .mud-table-row .row {
        cursor: pointer;
    }

    .mud-table-row .action-column {
        visibility: hidden;
        opacity: 0;
        transition: opacity 0.3s ease;
        margin: 0 0 0 auto;
    }

    /* Show the action column on row hover */
    .mud-table-row:hover {
        background-color: transparent;
        color: pink;
    }

        .mud-table-row:hover .action-column {
            visibility: visible;
            opacity: 1;
        }

    .full-height-datagrid {
        display: flex;
        flex-direction: column;
        height: 100%; /* Ensure the grid takes the full height of its container */
    }

        .full-height-datagrid .mud-datagrid-table {
            flex-grow: 1; /* Make the rows container fill available space */
            overflow-y: auto; /* Add scrolling if the content overflows */
        }

        .full-height-datagrid .mud-datagrid-pager {
            flex-shrink: 0; /* Prevent the pager from shrinking */
        }
</style>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string ADMINISTRATION_ROLE = "Administrators";
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    // Property used to add or edit the currently selected user
    IdentityUser objUser = new IdentityUser();
    // Tracks the selected role for the currently selected user
    string CurrentUserRole { get; set; } = "Users";
    // Collection to display the existing users
    List<ApplicationUser> ColUsers = new List<ApplicationUser>();
    // Options to display in the roles dropdown when editing a user
    List<string> Options = new List<string>() { "Users", "Administrators" };
    // To hold any possible errors
    string strError = "";
    // To enable showing the Popup
    bool ShowPopup = false;

    [Inject] private IDialogService DialogService { get; set; }

    string state = "Message box hasn't been opened yet";


    private async void OnDeleteClicked(ApplicationUser User)
    {
        var user = await _UserManager.FindByIdAsync(User.Id);
        bool? result = await DialogService.ShowMessageBox(
            $"Confirm Deletion:",
            $"ID:{user.Id}\nUser:{user.UserName}\nEmail:{user.Email}",
            yesText: "Delete!", cancelText: "Cancel");
        state = result == null ? "Canceled" : "Deleted!";

        if(state == "Deleted!")
        {
            if (user != null)
            {
                // Delete the user
                user.IsDeleted = true;
                isLoadingUsers = true;
                await _UserManager.UpdateAsync(user);
            }
            // Refresh Users
            await GetUsers();
            isLoadingUsers = false;
            StateHasChanged();
        }


    }

    protected override async Task OnInitializedAsync()
    {
        // ensure there is a ADMINISTRATION_ROLE
        var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
        if (RoleResult == null)
        {
            // Create ADMINISTRATION_ROLE Role
            await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }
        // Ensure a user named Admin@BlazorHelpWebsite.com is an Administrator
        // var user = await _UserManager.FindByNameAsync("Admin@BlazorHelpWebsite.com");
        // if (user != null)
        // {
        //     // Is Admin@BlazorHelpWebsite.com in administrator role?
        //     var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
        //     if (!UserResult)
        //     {
        //         // Put admin in Administrator role
        //         await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
        //     }
        // }
        // Get the current logged in user
        CurrentUser = (await authenticationStateTask).User;
        await GetUsers();
    }
    protected override async Task OnParametersSetAsync()
    {
        await GetUsers();
    }
    private bool isLoadingUsers = false;
    public async Task GetUsers()
    {
        if (isLoadingUsers)
            return;

        isLoadingUsers = true;

        try
        {
            // Clear error messages
            strError = "";

            // Fetch users
            ColUsers = await _UserManager.Users
                .Where(i => i.IsDeleted != true)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            strError = $"Error fetching users: {ex.Message}";
        }
        finally
        {
            isLoadingUsers = false;
        }
    }
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    // events
    public async Task StartedEditingItem(IdentityUser _IdentityUser)
    {
        // Open the Popup
        ShowPopup = true;
        // Set the selected user
        // as the current user
        objUser = _IdentityUser;
        // Get the user
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            // Is user in administrator role?
            var UserResult =
                await _UserManager
                .IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (UserResult)
            {
                CurrentUserRole = ADMINISTRATION_ROLE;
            }
            else
            {
                CurrentUserRole = "Users";
            }
        }

    }
    async Task GoToUserDetails(DataGridRowClickEventArgs<ApplicationUser> args)
    {
        NM.NavigateTo($"user/details?userid={args.Item.Id}");
    }


    void CanceledEditingItem(ApplicationUser user)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(user)}");
    }

    void CommittedItemChanges(ApplicationUser user)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(user)}");
    }
}
