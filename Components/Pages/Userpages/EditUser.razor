@page "/user/edit"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using BuildMasterPro.Data
@using BuildMasterPro.Services
@using Microsoft.AspNetCore.Components
@inject NavigationManager NM
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext db
@inject BlobStorageService imageService
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject UserService userService
@inject IUserStore<ApplicationUser> UserStore
@inject ISnackbar snackbar

<MudPopoverProvider />
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider/>
<MudSnackbarElement />

@if (isLoading)
{
    <BuildMasterPro.Components.Pages.Dialogs.Loader />
}

<MudPaper Class="d-flex flex-column justify-start align-start pt-7 ps-5 pe-5 pb-5 MainBG" Style="width:100%;height:100%;overflow-y:auto;">
    <MudPaper Class="d-flex flex-column justify-start align-start pa-3 MainBG mb-7" Elevation="0" Style="width:100%;">
        <MudText>Edit User</MudText>
    </MudPaper>
    <MudGrid Style="width:100%;height:100%;overflow-y:auto;">
        <MudItem lg="3" Class="d-flex flex-column justify-start align-center" Style="width:100%;height:100%;overflow-y:auto;">
            <MudPaper Class="d-flex flex-column justify-center align-center" Style="height:200px;width:200px;">
                <MudImage Style="width:auto;height:100%;object-fit:contain;object-position:center;" Src="@imagePreview" />
            </MudPaper>
            <MudFileUpload Style="width:200px;margin:10px 0 0 0;" T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadFiles2" MaximumFileCount="1">
                <ActivatorContent>
                    <MudButton Variant="Variant.Outlined"
                               StartIcon="@Icons.Material.Filled.AttachFile"
                               Style="width:200px;color:gray;">
                        Upload Image
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
        </MudItem>
        <MudItem lg="3" Class="d-flex flex-column justify-start align-center" Style="width:100%;height:100%;overflow-y:auto;">
            <MudStack>
                <MudText Class="mb-2 SecondaryText">Personal Information</MudText>
                <MudInputLabel>First Name</MudInputLabel>
                <MudTextField @bind-Value="OBJUser.FirstName" Variant="Variant.Outlined" Style="height:40px; min-width:90%;" Required Clearable />
                <MudInputLabel>Middle Name (optional)</MudInputLabel>
                <MudTextField @bind-Value="OBJUser.MiddleMName" Variant="Variant.Outlined" Style="height:40px; min-width:300px;" Clearable />
                <MudInputLabel>Last Name</MudInputLabel>
                <MudTextField @bind-Value="OBJUser.LastName" Variant="Variant.Outlined" Style="height:40px; min-width:300px;" Required Clearable />
                <MudInputLabel>Birth Date</MudInputLabel>
                <MudDatePicker Date="OBJUser.BirthDate" Editable="true" Required DateChanged="OnDateChanged" Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Class="mud-width-full" Style="min-width:300px;" />
                <MudInputLabel>Gender</MudInputLabel>
                <MudSelect Dense T="string" @bind-Value="OBJUser.Gender" TextChanged="OnGenderChanged" Variant="Variant.Outlined" Style="height:40px; min-width:300px;">
                    @foreach (var gender in GenderOptions)
                    {
                        <MudSelectItem Style="height:40px; min-width:300px;" Value="gender">@gender</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
        </MudItem>
        <MudItem lg="3" Class="d-flex flex-column justify-start align-center" Style="width:100%;height:100%;overflow-y:auto;">
            <MudStack>
                <MudText Class="mb-2 SecondaryText" Style="margin:0 0 0 0;">Contact Information</MudText>
                <MudInputLabel>Phone</MudInputLabel>
                <MudTextField @bind-Value="OBJUser.PhoneNumber" Variant="Variant.Outlined" Style="height:40px; min-width:300px;" Required Clearable />
                <MudInputLabel>Email</MudInputLabel>
                <MudTextField @bind-Value="OBJUser.Email" InputType="MudBlazor.InputType.Email" Variant="Variant.Outlined" Style="height:40px; min-width:300px;" Required Clearable />

                <MudText Class="mb-2 SecondaryText" Style="margin:3rem 0 0 0;">Job Details</MudText>
                <MudInputLabel>Job Title</MudInputLabel>
                <MudTextField @bind-Value="OBJUser.JobTitle" Variant="Variant.Outlined" Style="height:40px; min-width:300px;" Clearable />
                <MudInputLabel>Department</MudInputLabel>
                <MudTextField @bind-Value="OBJUser.Department" Variant="Variant.Outlined" Style="height:40px; min-width:300px;" Clearable />
            </MudStack>
        </MudItem>
        <MudItem lg="3" Class="d-flex flex-column justify-start align-center" Style="width:100%;height:100%;overflow-y:auto;">
            <MudStack>
                <MudText Class="mb-2 SecondaryText" Style="margin:0 0 0 0;">Account Information</MudText>
                <MudInputLabel>System Role</MudInputLabel>
                <MudSelect Dense T="string" @bind-SelectedValues="CurrentUserRole" MultiSelection="true" Required Variant="Variant.Outlined" Style="height:40px; min-width:300px;margin:0 0 1rem 0;">
                    @foreach (var role in Options)
                    {
                        <MudSelectItem Style="height:40px; min-width:300px;" Value="role">@role</MudSelectItem>
                    }
                </MudSelect>
                <MudInputLabel>Password</MudInputLabel>
                <MudTextField InputType="MudBlazor.InputType.Password" @bind-Value="newPassword" Variant="Variant.Outlined" Style="height:40px; min-width:300px;" Clearable />
                <MudStack Row Class="mt-8">
                    <MudButton Variant="Variant.Filled" Color="@Color.Dark" StartIcon="@Icons.Material.Outlined.Cancel"
                               OnClick="BackToUsers">Cancel</MudButton>
                    <MudButton Variant="Variant.Filled" Color="@Color.Primary" StartIcon="@Icons.Material.Outlined.Save"
                               OnClick="SaveUser">Save</MudButton>
                </MudStack>
            </MudStack>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    [SupplyParameterFromQuery]
    public string userid { get; set; }
    private ApplicationUser OBJUser { get; set; } = new();
    private string Password = "";
    private string SelectedRole = "Users";
    private List<string> Roles = new List<string> { "Administrators", "Project Manager", "Project Member" };
    private string ErrorMessage = "";
    List<string> Options = new List<string>() { "Administrators", "Project Manager", "Project Member" };
    List<string> GenderOptions = new List<string>() { "Male", "Female", "Prefer Not to Say" };
    IEnumerable<string> CurrentUserRole { get; set; } = new List<string>();
    string strError = "";
    string ADMINISTRATION_ROLE = "Administrators";
    string newPassword { get; set; } = "";
    IList<IBrowserFile> files = new List<IBrowserFile>();

    bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(userid))
        {
            // Fetch existing user details from the database
            OBJUser = await _UserManager.FindByIdAsync(userid);
            CurrentUserRole = (await _UserManager.GetRolesAsync(OBJUser));
            imagePreview = OBJUser.ProfilePictureUrl;
        }
    }

    private async Task SaveUser()
    {
        isLoading = true;
        if (string.IsNullOrEmpty(OBJUser.FirstName) ||
           string.IsNullOrEmpty(OBJUser.LastName) ||
           string.IsNullOrEmpty(OBJUser.Email) ||
           CurrentUserRole == null ||
           string.IsNullOrEmpty(newPassword) || newPassword == "")
        {
            snackbar.Add("Please fill the required fields", Severity.Error);
            return;
        }
        else
        {
            var file = files.FirstOrDefault();
            if (file != null)
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 5000000);
                var url = await imageService.UploadFileAsync(stream, file.Name, file.ContentType);
                OBJUser.ProfilePictureUrl = url; // Save the uploaded image URL
            }

            var user = await _UserManager.FindByIdAsync(userid);
            if (user != null)
            {
                // Update user details
                user.ProfilePictureUrl = OBJUser.ProfilePictureUrl;
                user.FirstName = OBJUser.FirstName;
                user.LastName = OBJUser.LastName;
                user.MiddleMName = OBJUser.MiddleMName;
                user.BirthDate = OBJUser.BirthDate;
                user.Gender = OBJUser.Gender;
                user.PhoneNumber = OBJUser.PhoneNumber;
                user.JobTitle = OBJUser.JobTitle;
                user.Department = OBJUser.Department;
                user.UserName = OBJUser.Email;

                // Check if password is being updated
                // if (!string.IsNullOrEmpty(OBJUser.PasswordHash))
                // {
                //     // Update the password only if it's not null or empty
                //     var resetPasswordResult = await _UserManager.RemovePasswordAsync(user);
                //     if (resetPasswordResult.Succeeded)
                //     {
                //         var addPasswordResult = await _UserManager.AddPasswordAsync(user, OBJUser.PasswordHash);
                //         if (!addPasswordResult.Succeeded)
                //         {
                //             // Handle failure to add password
                //             ErrorMessage = "Failed to update the password.";
                //             return;
                //         }
                //     }

                // }

                // Save updated user information
                var updateResult = await _UserManager.UpdateAsync(user);
                var resetToken =
                    await _UserManager.GeneratePasswordResetTokenAsync(user);
                var result =
                    await _UserManager.ResetPasswordAsync(
                        user,
                        resetToken,
                        newPassword);

                if (updateResult.Succeeded)
                {
                    // Update roles if needed
                    foreach (var role in CurrentUserRole)
                    {
                        if (!await _RoleManager.RoleExistsAsync(role))
                        {
                            await _RoleManager.CreateAsync(new IdentityRole(role));
                        }
                    }

                    var currentRoles = await _UserManager.GetRolesAsync(user);
                    await _UserManager.RemoveFromRolesAsync(user, currentRoles);
                    await _UserManager.AddToRolesAsync(user, CurrentUserRole);
                }
                else
                {
                    ErrorMessage = "Failed to update user details.";
                }
            }
            isLoading = false;
            await GoToUserDetails();
        }
    }

    private async Task UploadFiles2(IBrowserFile file)
    {
        
        // Handle file upload here
        if (file == null)
        {
            Console.WriteLine("No file was uploaded.");
            return;
        }
        files.Add(file); // Store the file // Get the selected file

        const long maxFileSize = 5 * 1024 * 1024;
        using var stream = file.OpenReadStream(maxAllowedSize: 5000000);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);

        // Convert image to Base64 string
        string base64String = Convert.ToBase64String(memoryStream.ToArray());
        imagePreview = $"data:{file.ContentType};base64,{base64String}";
        // if(!string.IsNullOrEmpty(imagePreview))
        // {
        //     await imageService.DeleteFileAsync(imagePreview);
        // }
        // // Generate Image Preview
        // if (file != null)
        // {
        //     using var stream = file.OpenReadStream();
        //     var url = await imageService.UploadFileAsync(stream, file.Name, file.ContentType);
        //     imagePreview = url; // Save the uploaded image URL
        // }

        await InvokeAsync(StateHasChanged);
    }

    private string imagePreview { get; set; }
    private async Task OnDateChanged(DateTime? date)
    {
        OBJUser.BirthDate = date;
    }

    private void OnGenderChanged(string gender)
    {
        OBJUser.Gender = gender;
    }

    private void BackToUsers()
    {
        NM.NavigateTo("/users");
    }
    async Task GoToUserDetails()
    {
        NM.NavigateTo($"user/details?userid={OBJUser.Id}");
    }
}
