@page "/user/create"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using BuildMasterPro.Data
@using BuildMasterPro.Services
@using Microsoft.AspNetCore.Components
@inject NavigationManager NM
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext db
@inject BlobStorageService imageService
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject UserService userService
@inject IUserStore<ApplicationUser> UserStore
@inject ISnackbar snackbar

<MudPopoverProvider />
<MudThemeProvider />
<MudDialogProvider/>
<MudSnackbarProvider />
<MudSnackbarElement />

<MudPaper Class="d-flex flex-column justify-start align-start pt-7 ps-5 pe-5 pb-5 MainBG" Style="width:100%;height:100%;overflow-y:auto;">
    <MudPaper Class="d-flex flex-column justify-start align-start pa-3 MainBG mb-7" Elevation="0" Style="width:100%;">
        <MudText>New User</MudText>
    </MudPaper>
    <MudGrid Style="width:100%;height:100%;overflow-y:auto;">
        <MudItem lg="3" Class="d-flex flex-column justify-start align-center" Style="width:100%;height:100%;overflow-y:auto;">
            <MudPaper Class="d-flex flex-column justify-center align-center" Style="height:200px;width:200px;">
                <MudImage Style="width:auto;height:100%;object-fit:contain;object-position:center;" Src="@imagePreview" />
            </MudPaper>
            <MudFileUpload Style="width:200px;margin:10px 0 0 0;" T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadFiles2" MaximumFileCount="1">
                <ActivatorContent >
                    <MudButton Variant="Variant.Outlined"
                               StartIcon="@Icons.Material.Filled.AttachFile"
                               Style="width:200px;color:gray;">
                    Upload Image
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
        </MudItem>
        <MudItem lg="3" Class="d-flex flex-column justify-start align-center" Style="width:100%;height:100%;overflow-y:auto;">
            <MudStack>
                <MudText Class="mb-2 SecondaryText">Personal Information</MudText>
                <MudInputLabel>First Name</MudInputLabel>
                <MudTextField @bind-Value="OBJUser.FirstName" Variant="Variant.Outlined" Style="height:40px; min-width:90%;" Required Clearable />
                <MudInputLabel>Middle Name (optional)</MudInputLabel>
                <MudTextField @bind-Value="OBJUser.MiddleMName" Variant="Variant.Outlined" Style="height:40px; min-width:300px;" Clearable />
                <MudInputLabel>Last Name</MudInputLabel>
                <MudTextField @bind-Value="OBJUser.LastName" Variant="Variant.Outlined" Style="height:40px; min-width:300px;" Required Clearable />
                <MudInputLabel>Birth Date</MudInputLabel>
                <MudDatePicker Date="OBJUser.BirthDate" Editable="true" Required DateChanged="OnDateChanged" Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd.MM.yyyy" Variant="Variant.Outlined" Class="mud-width-full" Style="min-width:300px;" />
                <MudInputLabel>Gender</MudInputLabel>
                <MudSelect Dense T="string" @bind-Value="OBJUser.Gender" TextChanged="OnGenderChanged" Variant="Variant.Outlined" Style="height:40px; min-width:300px;">
                    @foreach(var gender in GenderOptions)
                    {
                        <MudSelectItem Style="height:40px; min-width:300px;" Value="gender">@gender</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
            
        </MudItem>
        <MudItem lg="3" Class="d-flex flex-column justify-start align-center" Style="width:100%;height:100%;overflow-y:auto;">
            <MudStack>

                <MudText Class="mb-2 SecondaryText" Style="margin:0 0 0 0;">Contact Information</MudText>
                <MudInputLabel>Phone</MudInputLabel>
                <MudTextField @bind-Value="OBJUser.PhoneNumber" Variant="Variant.Outlined" Style="height:40px; min-width:300px;" Required Clearable />
                <MudInputLabel>Email</MudInputLabel>
                <MudTextField @bind-Value="OBJUser.Email" InputType="MudBlazor.InputType.Email" Variant="Variant.Outlined" Style="height:40px; min-width:300px;" Required Clearable />

                <MudText Class="mb-2 SecondaryText" Style="margin:3rem 0 0 0;">Job Details</MudText>
                <MudInputLabel>Job Title</MudInputLabel>
                <MudTextField @bind-Value="OBJUser.JobTitle" Variant="Variant.Outlined" Style="height:40px; min-width:300px;" Clearable />
                <MudInputLabel>Department</MudInputLabel>
                <MudTextField @bind-Value="OBJUser.Department" Variant="Variant.Outlined" Style="height:40px; min-width:300px;" Clearable />
            </MudStack>

        </MudItem>
        <MudItem lg="3" Class="d-flex flex-column justify-start align-center" Style="width:100%;height:100%;overflow-y:auto;">
            <MudStack>
                <MudText Class="mb-2 SecondaryText" Style="margin:0 0 0 0;">Account Information</MudText>
                <MudInputLabel>System Role</MudInputLabel>
                <MudSelect Dense T="string" @bind-Value="CurrentUserRole" Required Variant="Variant.Outlined" Style="height:40px; min-width:300px;margin:0 0 1rem 0;">
                    @foreach (var role in Options)
                    {
                        <MudSelectItem Style="height:40px; min-width:300px;" Value="role">@role</MudSelectItem>
                    }
                </MudSelect>
                @* <MudInputLabel>Username</MudInputLabel>
                <MudTextField Required @bind-Value="OBJUser.UserName" Variant="Variant.Outlined" Style="height:40px; min-width:300px;" Clearable /> *@
                <MudInputLabel>Password</MudInputLabel>
                <MudTextField InputType="MudBlazor.InputType.Password" Required @bind-Value="OBJUser.PasswordHash" Variant="Variant.Outlined" Style="height:40px; min-width:300px;" Clearable />
                <MudStack Row Class="mt-8">
                    <MudButton Variant="Variant.Filled" Color="@Color.Dark" StartIcon="@Icons.Material.Outlined.Cancel"
                    OnClick="BackToUsers">Cancel</MudButton>
                    <MudButton Variant="Variant.Filled" Color="@Color.Primary" StartIcon="@Icons.Material.Outlined.Save"
                    OnClick="CreateUser">Save</MudButton>
                </MudStack>
            </MudStack>

        </MudItem>
    </MudGrid>
    
</MudPaper>

@code {
    [SupplyParameterFromQuery]
    public string userid { get; set; }
    private ApplicationUser OBJUser { get; set; } = new();
    private string Password = "";
    private string SelectedRole = "Users";
    private List<string> Roles = new List<string> { "Users", "Administrators", "Project Manager" };
    private string ErrorMessage = "";
    List<string> Options = new List<string>() { "Users", "Administrators", "Project Manager" };
    List<string> GenderOptions = new List<string>() { "Male", "Female", "Prefer Not to Say" };
    string CurrentUserRole { get; set; } = "Users";
    string strError = "";
    string ADMINISTRATION_ROLE = "Administrators";
    IList<IBrowserFile> files = new List<IBrowserFile>();

    protected override async Task OnInitializedAsync()
    {


    }

    private async Task CreateUser()
    {
        if(string.IsNullOrEmpty(OBJUser.FirstName) ||
           string.IsNullOrEmpty(OBJUser.LastName) ||
           string.IsNullOrEmpty(OBJUser.Email) ||
           string.IsNullOrEmpty(OBJUser.PasswordHash) ||
           string.IsNullOrEmpty(CurrentUserRole))
        {
            snackbar.Add("Please fill the required fields", Severity.Error);
            return;
        }
        else
        {
            var newUser = CreateUserInstance();
            var file = files.FirstOrDefault();
            if (file != null)
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 5000000);
                var url = await imageService.UploadFileAsync(stream, file.Name, file.ContentType);
                OBJUser.ProfilePictureUrl = url; // Save the uploaded image URL
            }
            await UserStore.SetUserNameAsync(newUser, OBJUser.Email, CancellationToken.None);
            var emailStore = GetEmailStore();
            await emailStore.SetEmailAsync(newUser, OBJUser.Email, CancellationToken.None);
            newUser.ProfilePictureUrl = OBJUser.ProfilePictureUrl;
            newUser.FirstName = OBJUser.FirstName;
            newUser.LastName = OBJUser.LastName;
            newUser.MiddleMName = OBJUser.MiddleMName;
            newUser.BirthDate = OBJUser.BirthDate;
            newUser.Gender = OBJUser.Gender;
            newUser.PhoneNumber = OBJUser.PhoneNumber;
            newUser.JobTitle = OBJUser.JobTitle;
            newUser.Department = OBJUser.Department;
            newUser.Address = OBJUser.Address;

            //var CreateResult = await _UserManager.CreateAsync(NewUser, NewUser.PasswordHash);

            // if (!CreateResult.Succeeded)
            // {
            //     strError = CreateResult.Errors.FirstOrDefault()?.Description ?? "Create error";
            //     return;
            // }

            var user = await _UserManager.CreateAsync(newUser, OBJUser.PasswordHash);


            // ✅ Check if the role exists, if not, create it
            if (!await _RoleManager.RoleExistsAsync(CurrentUserRole))
            {
                await _RoleManager.CreateAsync(new IdentityRole(CurrentUserRole));
            }

            // ✅ Assign the user to the role
            var createdUser = await _UserManager.FindByEmailAsync(OBJUser.Email);
            if (user.Succeeded) await _UserManager.AddToRoleAsync(newUser, CurrentUserRole);
            

            //SAVE IMAGE IN CLOUD

            BackToUsers();
        }


    }

    private void OnDateChanged(DateTime? newDate)
    {
        OBJUser.BirthDate = (DateTime)newDate!;
    }

    private void OnGenderChanged(string gender)
    {
        OBJUser.Gender = gender;
    }

    private string? imagePreview; // Holds image preview URL
    private IBrowserFile? selectedFile; // Stores the selected file

    private async void UploadFiles2(IBrowserFile file)
    {
        if (file == null)
        {
            Console.WriteLine("No file was uploaded.");
            return;
        }
        files.Add(file); // Store the file // Get the selected file

        const long maxFileSize = 5 * 1024 * 1024;
        using var stream = file.OpenReadStream(maxAllowedSize: 5000000);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);

        // Convert image to Base64 string
        string base64String = Convert.ToBase64String(memoryStream.ToArray());
        imagePreview = $"data:{file.ContentType};base64,{base64String}";
        // if(!string.IsNullOrEmpty(imagePreview))
        // {
        //     await imageService.DeleteFileAsync(imagePreview);
        // }
        // // Generate Image Preview
        // if (file != null)
        // {
        //     using var stream = file.OpenReadStream();
        //     var url = await imageService.UploadFileAsync(stream, file.Name, file.ContentType);
        //     imagePreview = url; // Save the uploaded image URL
        // }

        await InvokeAsync(StateHasChanged);
    }



    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File; // Get the selected file
        var buffer = new byte[selectedFile.Size];

        using var stream = selectedFile.OpenReadStream();
        await stream.ReadAsync(buffer);

        string base64String = Convert.ToBase64String(buffer);
        imagePreview = $"data:{selectedFile.ContentType};base64,{base64String}";
    }

    private void BackToUsers()
    {
        NM.NavigateTo("users");
    }
    private ApplicationUser CreateUserInstance()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }
    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!_UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }
}

