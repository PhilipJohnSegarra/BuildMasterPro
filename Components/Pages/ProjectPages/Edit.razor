﻿
@page "/projects/edit"
@using Microsoft.EntityFrameworkCore
@using BuildMasterPro.Data
@using BuildMasterPro.Components.Pages.Dialogs
@inject IDbContextFactory<BuildMasterPro.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject BuildMasterPro.Services.ProjectService ProjectService
@inject BuildMasterPro.Services.ProjectUserService ProjUserService
@inject BuildMasterPro.Services.UserService UserService
@inject ISnackbar snackBar
@inject IDialogService DialogService

<MudPopoverProvider />
<MudDialogProvider />
<MudThemeProvider />
<MudSnackbarProvider/>
<MudSnackbarElement/>

<PageTitle>Edit</PageTitle>
<hr />
@if (Project is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudGrid Spacing="3">
        <MudItem lg="6">
            <MudPaper Class="d-flex flex-column justify-start align-start pa-5 pb-10">
                <MudToolBar Class="mud-width-full d-flex flex-row justify-space-between">
                    <MudText>Project Details</MudText>
                    <MudButtonGroup Class="SecondaryText" Variant="Variant.Outlined">
                        @if (notEditing == true)
                        {
                            <MudButton StartIcon="@Icons.Material.Outlined.Edit" OnClick="()=>{notEditing = !notEditing;}">Edit</MudButton>
                        }
                        <MudButton StartIcon="@Icons.Material.Outlined.Save" Disabled="notEditing" OnClick="UpdateProject">Save</MudButton>
                        @if (notEditing == false)
                        {
                            <MudButton StartIcon="@Icons.Material.Outlined.Save" Disabled="notEditing" OnClick="()=>{notEditing = !notEditing;}">Cancel</MudButton>
                        }
                        
                    </MudButtonGroup>
                </MudToolBar>
                <MudInputLabel Class="mt-5">Project Name</MudInputLabel>
                <MudTextField ReadOnly="notEditing" Class="mud-width-full" Variant="Variant.Filled" @bind-Value="Project.ProjectName" />
                <MudInputLabel Class="mt-5">Description</MudInputLabel>
                <MudTextField ReadOnly="notEditing" Class="mud-width-full" Variant="Variant.Filled" Lines="3" @bind-Value="Project.Description" />
                <MudInputLabel Class="mt-5">Address</MudInputLabel>
                <MudTextField ReadOnly="notEditing" Class="mud-width-full" Variant="Variant.Filled" @bind-Value="Project.Address" />
                <MudInputLabel Class="mt-5">Start Date</MudInputLabel>
                <MudDatePicker ReadOnly="notEditing" Class="mud-width-full" Variant="Variant.Filled" Date="Project.Startdate" DateChanged="OnStartDateChanged" />
                <MudInputLabel Class="mt-5">End Date</MudInputLabel>
                <MudDatePicker ReadOnly="notEditing" Class="mud-width-full" Variant="Variant.Filled" Date="Project.Enddate" DateChanged="OnEndDateChanged" />

                <MudButton Class="mt-5 mud-width-full" OnClick="OpenDialogAsync" Color="Color.Error">Delete Project</MudButton>
            </MudPaper>
        </MudItem>
        <MudItem lg="6">
            <MudPaper Class="d-flex flex-column justify-start align-start pa-5 pb-10">
                <MudToolBar Class="mud-width-full d-flex flex-row justify-space-between">
                    <MudText>Client Details</MudText>
                    <MudButtonGroup Class="SecondaryText" Variant="Variant.Outlined">
                        @if (notEditingClient == true)
                        {
                            <MudButton StartIcon="@Icons.Material.Outlined.Edit" OnClick="()=>{notEditingClient = !notEditingClient;}">Edit</MudButton>
                        }
                        <MudButton StartIcon="@Icons.Material.Outlined.Save" Disabled="notEditingClient" OnClick="SaveClient">Save</MudButton>
                        @if (notEditingClient == false)
                        {
                            <MudButton StartIcon="@Icons.Material.Outlined.Save" Disabled="notEditingClient" OnClick="()=>{notEditingClient = !notEditingClient;}">Cancel</MudButton>
                        }
                    </MudButtonGroup>
                </MudToolBar>

                <MudInputLabel Class="mt-5">Company Name</MudInputLabel>
                <MudTextField ReadOnly="notEditingClient" Class="mud-width-full" Required Variant="Variant.Filled" @bind-Value="Client.CompanyName" />

                <MudInputLabel Class="mt-5">Company Email</MudInputLabel>
                <MudTextField ReadOnly="notEditingClient" Class="mud-width-full" Variant="Variant.Filled" @bind-Value="Client.CompanyEmail" />

                <MudInputLabel Class="mt-5">Company Phone (Primary)</MudInputLabel>
                <MudTextField ReadOnly="notEditingClient" Class="mud-width-full" Required Variant="Variant.Filled" @bind-Value="Client.CompanyNumber1" />

                <MudInputLabel Class="mt-5">Company Phone (Secondary)</MudInputLabel>
                <MudTextField ReadOnly="notEditingClient" Class="mud-width-full" Variant="Variant.Filled" @bind-Value="Client.CompanyNumber2" />

                <MudInputLabel Class="mt-5">Company Address</MudInputLabel>
                <MudTextField ReadOnly="notEditingClient" Class="mud-width-full" Variant="Variant.Filled" @bind-Value="Client.CompanyAddress" />

                <MudInputLabel Class="mt-5">Company Website</MudInputLabel>
                <MudTextField ReadOnly="notEditingClient" Class="mud-width-full" Variant="Variant.Filled" @bind-Value="Client.CompanyWebsite" />

                <MudInputLabel Class="mt-5">Industry Type</MudInputLabel>
                <MudTextField ReadOnly="notEditingClient" Class="mud-width-full" Variant="Variant.Filled" @bind-Value="Client.IndustryType" />

                <MudInputLabel Class="mt-5">Primary Contact Name</MudInputLabel>
                <MudTextField ReadOnly="notEditingClient" Class="mud-width-full" Required Variant="Variant.Filled" @bind-Value="Client.PersonName" />

                <MudInputLabel Class="mt-5">Primary Contact Email</MudInputLabel>
                <MudTextField ReadOnly="notEditingClient" Class="mud-width-full" Variant="Variant.Filled" @bind-Value="Client.PersonEmail" />

                <MudInputLabel Class="mt-5">Primary Contact Phone</MudInputLabel>
                <MudTextField ReadOnly="notEditingClient" Class="mud-width-full" Variant="Variant.Filled" @bind-Value="Client.PersonPhone" />

                <MudInputLabel Class="mt-5">Alternate Contact Name</MudInputLabel>
                <MudTextField ReadOnly="notEditingClient" Class="mud-width-full" Variant="Variant.Filled" @bind-Value="Client.AlternatePersonName" />

                <MudInputLabel Class="mt-5">Alternate Contact Email</MudInputLabel>
                <MudTextField ReadOnly="notEditingClient" Class="mud-width-full" Variant="Variant.Filled" @bind-Value="Client.AlternatePersonEmail" />

                <MudInputLabel Class="mt-5">Alternate Contact Phone</MudInputLabel>
                <MudTextField ReadOnly="notEditingClient" Class="mud-width-full" Variant="Variant.Filled" @bind-Value="Client.AlternatePersonPhone" />

                <MudExpansionPanel Text="Legal and Compliance (Optional)" Class="mt-5" Style="max-height:max-content;width:100%;" Expanded="true" Gutters>
                    <MudInputLabel Class="mt-5">Date Established</MudInputLabel>
                    <MudDatePicker ReadOnly="notEditingClient" Class="mud-width-full" Variant="Variant.Filled" Date="Client.DateEstablished" />

                    <MudInputLabel Class="mt-5">Registration Number</MudInputLabel>
                    <MudTextField ReadOnly="notEditingClient" Class="mud-width-full" Variant="Variant.Filled" @bind-Value="Client.RegistrationNumber" />

                    <MudInputLabel Class="mt-5">Tax Identification Number (TIN)</MudInputLabel>
                    <MudTextField ReadOnly="notEditingClient" Class="mud-width-full" Variant="Variant.Filled" @bind-Value="Client.TaxIdentificationNumber" />
                </MudExpansionPanel>
                

                <MudInputLabel Class="mt-5">Status</MudInputLabel>
                <MudSwitch T="bool" @bind-Value="Client.IsActive" Disabled="notEditingClient">Active</MudSwitch>

                <MudInputLabel Class="mt-5">Notes</MudInputLabel>
                <MudTextField ReadOnly="notEditingClient" Class="mud-width-full" Variant="Variant.Filled" Lines="3" @bind-Value="Client.Notes" />
            </MudPaper>
        </MudItem>


    </MudGrid>

                                            @* <div class="mb-3"> *@
                                            @*     <label for="projectname" class="form-label">ProjectName:</label> *@
                                            @*     <InputText id="projectname" @bind-Value="Project.ProjectName" class="form-control" aria-required="true"/> *@
                                            @*     <ValidationMessage For="() => Project.ProjectName" class="text-danger" /> *@
                                            @* </div> *@
                                            @* <div class="mb-3"> *@
                                            @*     <label for="description" class="form-label">Description:</label> *@
                                            @*     <InputText id="description" @bind-Value="Project.Description" class="form-control" /> *@
                                            @*     <ValidationMessage For="() => Project.Description" class="text-danger" /> *@
                                            @* </div> *@
                                            @* <div class="mb-3"> *@
                                            @*     <label for="startdate" class="form-label">Startdate:</label> *@
                                            @*     <InputDate id="startdate" @bind-Value="Project.Startdate" class="form-control" aria-required="true"/> *@
                                            @*     <ValidationMessage For="() => Project.Startdate" class="text-danger" /> *@
                                            @* </div> *@
                                            @* <div class="mb-3"> *@
                                            @*     <label for="enddate" class="form-label">Enddate:</label> *@
                                            @*     <InputDate id="enddate" @bind-Value="Project.Enddate" class="form-control" /> *@
                                            @*     <ValidationMessage For="() => Project.Enddate" class="text-danger" /> *@
                                            @* </div> *@
                                            @* <div class="mb-3"> *@
                                            @*     <label for="status" class="form-label">Status:</label> *@
                                            @*     <InputText id="status" @bind-Value="Project.Status" class="form-control" /> *@
                                            @*     <ValidationMessage For="() => Project.Status" class="text-danger" /> *@
                                            @* </div> *@
                                            @* <div class="buttons-container"> *@
                                            @*     <button class="back-button" @onclick="@GoBackToList">Back to list</button> *@
                                            @*     <button type="submit" class="save-button">Save</button> *@
                                            @* </div> *@


}

@* <div> *@
@*     <a href="/projects">Back to List</a> *@
@* </div> *@

@code {
    [SupplyParameterFromQuery]
    private int ProjectId { get; set; }

    [SupplyParameterFromForm]
    private Project? Project { get; set; }

    private Client? Client { get; set; } = new();

    string statusValue = "";
    string[] StatusArray = new string[] { "Not Started", "In Progress", "Finished" };
    bool notEditing = true;
    bool notEditingClient = true;
    bool isClientEmpty = false;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Project ??= await context.Project.FirstOrDefaultAsync(m => m.ProjectId == ProjectId);
        Client = await ProjectService.GetProjectClient(Project);
        if(Client == null)
        {
            isClientEmpty = true;
            Client = new();
        }

        if (Project is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateProject()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Project!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProjectExists(Project!.ProjectId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        await InvokeAsync(StateHasChanged);
        notEditing = true;
    }

    private bool ProjectExists(int projectid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Project.Any(e => e.ProjectId == projectid);
    }

    private void GoBackToList()
    {
        NavigationManager.NavigateTo("/projects");
    }

    private void OnStartDateChanged(DateTime? newDate)
    {
        Project.Startdate = (DateTime)newDate!;
    }

    private void OnEndDateChanged(DateTime? newDate)
    {
        Project.Enddate = (DateTime)newDate!;
    }

    private async Task SaveClient()
    {
        if (isClientEmpty)
        {
            if (string.IsNullOrEmpty(Client.CompanyName) || string.IsNullOrEmpty(Client.CompanyNumber1) || string.IsNullOrEmpty(Client.PersonName))
            {
                snackBar.Add("Please provide the required fields.", severity: Severity.Warning);
                return;
            }
            var newClient = await ProjectService.AddClientInformation(Client);
            Project.ClientId = newClient.Id;
            await ProjectService.UpdateProjectAsync(Project);
            snackBar.Add("Created client information successfully", severity: Severity.Success);
            notEditingClient = true;
        }
        else if (!isClientEmpty)
        {
            if (string.IsNullOrEmpty(Client.CompanyName) || string.IsNullOrEmpty(Client.CompanyNumber1) || string.IsNullOrEmpty(Client.PersonName))
            {
                snackBar.Add("Please provide the required fields.", severity: Severity.Warning);
                return;
            }
            ProjectService.UpdateClientInformation(Client);
            snackBar.Add("Updated client information successfully", severity: Severity.Success);
            notEditingClient = true;
        }
    }
    private async Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        // member

        var parameters = new DialogParameters<ProjectDeleterDialog>
        {
            {x => x.projectid, Project.ProjectId}
        };

        var result = await DialogService.ShowAsync<ProjectDeleterDialog>("Simple Dialog", options);
        await InvokeAsync(StateHasChanged);

    }
}
