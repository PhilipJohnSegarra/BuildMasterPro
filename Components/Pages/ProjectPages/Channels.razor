@page "/projects/channels"
@using BuildMasterPro.Components.Pages.Dialogs
@using BuildMasterPro.Services
@using BuildMasterPro.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProjectService ProjectService
@inject ProjectUserService projUserService
@inject ChannelService channelService
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavManager
@inject BlobStorageService fileService
@rendermode InteractiveServer

<MudDialogProvider MaxWidth="MaxWidth.Medium" FullWidth="true"/>
@if (projectChannels != null && projectChannels.Count > 0)
{
    <MudPaper Class="pa-0 TransparentBG" Elevation="0" Style="height:100%;width:100%;overflow:hidden;position:relative;">
        @if(CurrentChannel != null)
        {
            <MudDrawer @bind-Open="@_openEnd" Fixed="false" Anchor="Anchor.End" Elevation="0" Variant="@DrawerVariant.Temporary">
                <MudDrawerHeader>
                    <MudText Typo="Typo.h6">@CurrentChannel.ChannelName</MudText>
                </MudDrawerHeader>
                <MudNavMenu>
                    <MudTextField T="string" @bind-Value="@CurrentChannel.ChannelName"/>
                    <MudTextField T="string" @bind-Value="@CurrentChannel.ChannelDescription"/>
                </MudNavMenu>
            </MudDrawer>
        }
        
        <MudGrid Style="height:100%;width:100%;" Spacing="1">
            <MudItem lg="3" Style="height:100%;width:100%;">
                <MudPaper Class="MainBG d-flex flex-column justify-center align-center" Style="height:100%;width:100%;">
                    <div style="display:grid;grid-template-rows:50px 1fr;height:100%;width:100%;">
                        <MudPaper Elevation="1" Class="d-flex flex-row justify-space-between align-center TransparentBG ps-5 pe-5" Style="border-radius:0;height:100%;width:100%;z-index:8;">
                            <MudText Style="font-weight:bold;font-size:25px;">
                                @ProjectService.CurrentProject.ProjectName
                            </MudText>
                            <MudIconButton OnClick="OpenDialogAsync" Icon="@Icons.Material.Outlined.Add" Style="padding:3px;border-radius:0;" />
                        </MudPaper>
                        <MudPaper Class="d-flex flex-column justify-start align-start TransparentBG pt-3 ps-3 pe-3 pb-3" Style="border-radius:0;height:100%;width:100%;z-index:8;overflow-y:auto;">
                            @* @foreach (var i in projectChannels)
                            {
                                <MudButton Class="pa-2" Style="width:100%;">
                                    <MudText Align="Align.Start" Style="width:100%;">
                                        @i.ChannelName
                                    </MudText>
                                </MudButton>
                            } *@
                            <MudList T="string" Style="width:100%;">
                                @foreach (var category in channelCategories)
                                {
                                    <MudListItem Text="@category">
                                        <NestedList>
                                            @foreach(var c in projectChannels.Where(c => c.Category.Equals(category)))
                                            {
                                                <MudListItem OnClick="async()=>{await SetCurrentChannel(c);}"><span><MudAvatar Size="Size.Small">#</MudAvatar></span> @c.ChannelName</MudListItem>
                                            }
                                        </NestedList>
                                        
                                    </MudListItem>
                                }
                            </MudList>
                            
                        </MudPaper>
                    </div>
                </MudPaper>
            </MudItem>
            <MudItem lg="9" Style="height:100%;width:100%;">
                <MudPaper Class="MainBG" Style="height:100%;width:100%;">
                    <div style="display:grid;grid-template-rows:50px 1fr auto 70px;height:100%;width:100%;">
                        <MudPaper Elevation="1" Class="d-flex flex-row justify-space-between align-center TransparentBG ps-3 pe-3" Style="border-radius:0;height:100%;width:100%;z-index:8;">
                            <MudText>
                                <span><MudAvatar Size="Size.Medium">#</MudAvatar></span>
                                @(CurrentChannel != null? CurrentChannel.ChannelName : "No Channel Selected")
                            </MudText>
                            @if (CurrentChannel != null)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Menu" Style="padding:3px;border-radius:0;" OnClick="ToggleEndDrawer" />
                            }
                            
                        </MudPaper>
                        @if(CurrentChannel != null)
                        {
                            <MudPaper Class="d-flex flex-column justify-start align-start TransparentBG pt-3 ps-3 pe-3 pb-3" Style="border-radius:0;height:100%;width:100%;z-index:8;overflow-y:auto;">
                                <div id="messages" style="overflow-y:auto;padding:1rem;height:100%;width:100%;">
                                    @if (CurrentChannel.ChannelMessages != null)
                                    {
                                        <MudStack Style="max-height:100%;width:100%;">
                                            @foreach (var message in CurrentChannel.ChannelMessages)
                                            {
                                                <MudPaper Style="width:max-content;border-radius:10px;margin-top:5px;margin-bottom:5px;padding:1rem;max-width:50%;"
                                                          Class="@(message.SenderID == this.CurrentUser!.Id? "PrimaryBG senderStyle d-flex flex-column justify-start align-start" : "SecondaryBG d-flex flex-column justify-start align-start")">
                                                    <MudText Class="MainText d-flex flex-row justify-center align-start" Style="font-size:15px;margin:0 0 1rem 0;"><span style="margin:0 .5rem 0 0;">
                                                        <MudAvatar Size="Size.Small">
                                                            @if(string.IsNullOrEmpty(message.SenderImage)){
                                                                <MudIcon Icon="@Icons.Material.Rounded.Person"/>
                                                            }
                                                            else{
                                                                <MudImage Src="@message.SenderImage" Style="width:100%;"/>
                                                            }
                                                            
                                                        </MudAvatar></span>@message.SenderName</MudText>
                                                    <p class="MainText">@message.Message</p>

                                                    @if (message.Files != null && message.Files.Count > 0)
                                                    {
                                                        <MudPaper Class="d-flex flex-column justify-start align-start TransparentBG mt-3" Elevation="0" Style="width:max-content;max-width:100%;">
                                                            @foreach (var file in message.Files)
                                                            {
                                                                <a style="padding:5px 0 5px 0;color:white;display:flex;flex-direction:row;justify-content:center;align-items:center;max-width:90%;overflow:hidden;" href="@file">@file</a>
                                                            }

                                                        </MudPaper>
                                                    }

                                                    @if (message.ImageArray != null && message.ImageArray.Count > 0)
                                                    {
                                                        <MudGrid Style="max-width:70%;margin:1px 0 0 0;">
                                                            @foreach (var image in message.ImageArray)
                                                            {
                                                                <MudItem lg="4">
                                                                    <MudImage Src="@image" Style="max-width:100%;" />
                                                                </MudItem>
                                                            }
                                                        </MudGrid>
                                                    }
                                                    else
                                                    {

                                                    }

                                                </MudPaper>
                                            }
                                        </MudStack>
                                    }
                                    else
                                    {
                                        <p>No Messages Yet</p>
                                    }
                                </div>

                            </MudPaper>
                        }
                        
                        <div>
                            @if (this.files != null || this.images != null)
                            {
                                <MudGrid Style="width:100%;padding:1rem;">
                                    @if(this.files != null && this.files.Count > 0){
                                        <MudItem lg="6">
                                            @foreach(var file in this.files)
                                            {
                                                <MudText>
                                                    <span><MudIcon Size="Size.Small" Icon="@Icons.Material.Outlined.AttachFile"/></span>
                                                    @file.Name<span style="margin:0 0 0 1rem;"><MudIconButton Icon="@Icons.Material.Outlined.Cancel" Size="Size.Small" OnClick="()=>{this.files.Remove(file);}"/></span>
                                                </MudText>
                                            }
                                        </MudItem>
                                    }
                                    @if (this.images != null && this.images.Count > 0)
                                    {
                                        <MudItem lg="6">
                                            <MudGrid Style="width:100%;" Spacing="1">
                                                @foreach (var image in this.ImageDisplayList)
                                                {
                                                    <MudItem lg="2">
                                                        <MudPaper Elevation="0" Class="d-flex flex-column justify-start align-center pa-0 TransparentBG">
                                                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Cancel" Class="ms-auto"
                                                            OnClick="()=>{this.images.Remove(image.Image);this.ImageDisplayList.Remove(image);}"/>
                                                            <MudImage Src="@image.Display" Style="max-width:100%;" />
                                                        </MudPaper>
                                                        
                                                    </MudItem>

                                                }
                                            </MudGrid>
                                            
                                        </MudItem>
                                    }
                                    
                                </MudGrid>
                            }
                        </div>
                        
                        <MudPaper Elevation="1" Class="d-flex flex-row justify-space-between align-center TransparentBG ps-3 pe-3" Style="border-radius:0;height:100%;width:100%;z-index:8;">
                            <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles">
                                <ActivatorContent>
                                    <MudIconButton Class="SecondaryText"
                                                   Icon="@Icons.Material.Filled.AttachFile">
                                    </MudIconButton>
                                </ActivatorContent>
                            </MudFileUpload>
                            <MudTextField T="string" @bind-Value="MessageBoxText" Style="flex-grow: 1;max-height:45px;border-radius:40px;" Variant="Variant.Outlined" OnKeyDown="HandleKeyDown" OnKeyUp="HandleKeyDown" />
                            <MudIconButton Icon="@Icons.Material.Filled.Send" OnClick="async()=>{await SendMessage(CurrentChannel);}" Style="padding:3px;border-radius:0;" />
                        </MudPaper>
                    </div>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudPaper>
}
else
{
    <MudPaper Class="pa-0 MainBG d-flex flex-column justify-center align-center" Elevation="0" Style="height:100%;width:100%;overflow:hidden;position:relative;">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <MudText>Please wait</MudText>
        @if (isChannelEmpty)
        {
            <MudButton StartIcon="@Icons.Material.Outlined.Add" OnClick="OpenDialogAsync" Class="PrimaryText">Add New Channel</MudButton>
        }
        
    </MudPaper>
}

<style>
    .senderStyle {
        margin-left: auto;
    }
</style>

@code {
    private List<Channel> projectChannels { get; set; } = new();
    private List<string> channelCategories { get; set; } = new();
    private List<ChannelMessage> Messages { get; set; } = new();
    private Channel? CurrentChannel { get; set; } = null;
    private int? projId;
    private bool isChannelEmpty = false;

    private string? MessageBoxText { get; set; }

    private AuthenticationState? authState;
    private ApplicationUser? CurrentUser { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        CurrentUser = await UserManager.GetUserAsync(authState.User);
        var proj = await ProjectService.GetCurrentProjectAsync();
        projId = proj.ProjectId;
        projectChannels = await channelService.GetProjChannelsAsync((int)projId);

        foreach(var c in projectChannels)
        {
            if (!channelCategories.Contains(c.Category) && c.Category != null)
            {
                channelCategories.Add(c.Category);
            }
            else if(c.Category == null)
            {
                c.Category = "General";
                if (!channelCategories.Contains(c.Category)) channelCategories.Add(c.Category);

            }
        }

        channelService.OnChannelUpdated += UpdateUI;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollMessages();
    }
    protected override async Task OnParametersSetAsync()
    {
        if(projectChannels.Count <= 0)
        {
            isChannelEmpty = true;
        }
    }

    private async Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var currentProject = await ProjectService.GetCurrentProjectAsync();
        var projMembers = projUserService.GetAllByCurrentProject();
        // member

        // var parameters = new DialogParameters<ChannelAdderDialog>
        // {
        //     {x => x.ProjectId, currentProject.ProjectId}
        // };

        var result = await DialogService.ShowAsync<ChannelAdderDialog>("Simple Dialog", options);
        await InvokeAsync(StateHasChanged);

    }
    private async Task ScrollMessages()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "messages");
    }
    private async Task SendMessage(Channel channel)
    {
        if(!string.IsNullOrEmpty(MessageBoxText) && CurrentChannel != null)
        {
            ChannelMessage message = new()
            {
                Message = MessageBoxText,
                SenderID = CurrentUser.Id,
                SenderName = CurrentUser.FirstName != null && CurrentUser.LastName != null ? CurrentUser.FirstName + " " + CurrentUser.LastName : CurrentUser.Email,
                SenderImage = CurrentUser.ProfilePictureUrl
            };

            if(files != null)
            {
                foreach (var file in files)
                {
                    using var stream = file.OpenReadStream();
                    var newfile = await fileService.UploadFileAsync(stream, file.Name, file.ContentType);
                    message.Files.Add(newfile);
                }
            }

            if(images != null)
            {
                foreach (var image in images)
                {
                    using var stream = image.OpenReadStream();
                    var newImage = await fileService.UploadFileAsync(stream, image.Name, image.ContentType);
                    message.ImageArray.Add(newImage);
                }
            }


            await channelService.AddMessageAsync(channel.ChannelId, message);
            CurrentChannel = await channelService.GetChannelByIdAsync(channel.ChannelId);
            MessageBoxText = "";
            this.files = new List<IBrowserFile>();
            this.images = new List<IBrowserFile>();
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            return;
        }

    }

    public async Task SetCurrentChannel(Channel channel)
    {
        CurrentChannel = new();
        CurrentChannel = await channelService.GetChannelByIdAsync(channel.ChannelId);
        Messages = CurrentChannel.ChannelMessages;
    }

    private void NewMessageReceived(Channel message)
    {
        InvokeAsync(StateHasChanged);
    }
    private Task LoadMessages()
    {
        Messages = CurrentChannel.ChannelMessages;
        return Task.CompletedTask; // Since there's no async operation, return a completed task
    }

    IList<IBrowserFile> files = new List<IBrowserFile>();
    IList<IBrowserFile> images = new List<IBrowserFile>();
    List<_imageViewModel> ImageDisplayList = new();
    List<string> imageUrls = new();
    private static readonly HashSet<string> ImageExtensions = new() { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp", ".tiff", ".svg" };
    private async Task UploadFiles(IReadOnlyList<IBrowserFile> uploadedFiles)
    {
        foreach (var file in uploadedFiles)
        {
            string extension = Path.GetExtension(file.Name).ToLower();
            if (file.ContentType.StartsWith("image/") || ImageExtensions.Contains(extension))
            {
                images.Add(file); // Add to images list if it's an image
                //string url = await ImageDisplay(file);
                //imageUrls.Add(url);
                var newDisplay = new _imageViewModel
                    {
                        Image = file,
                        Display = await ImageDisplay(file)
                    };
                ImageDisplayList.Add(newDisplay);
            }
            else
            {
                files.Add(file); // Add to files list otherwise
            }
        }
        //TODO upload the files to the server
    }
    private async Task<string> ImageDisplay(IBrowserFile file)
    {
        using var stream = file.OpenReadStream(maxAllowedSize: 5000000);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);

        // Convert image to Base64 string
        string base64String = Convert.ToBase64String(memoryStream.ToArray());
        return $"data:{file.ContentType};base64,{base64String}";
    }

    //FOR DRAWER
    private bool _openStart = false;
    private bool _openEnd = false;

    [CascadingParameter]
    public bool Rtl { get; set; }

    private void ToggleStartDrawer()
    {
        _openStart = !_openStart;
    }

    private void ToggleEndDrawer()
    {
        _openEnd = !_openEnd;
    }
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SendMessage(CurrentChannel);
        }
    }
    private void UpdateUI(Channel updatedChannel)
    {
        if (updatedChannel.ChannelMessages != null)
        {
            Messages = updatedChannel.ChannelMessages;
            InvokeAsync(StateHasChanged); // Refresh Blazor UI
        }
    }
    public void Dispose()
    {
        channelService.OnChannelUpdated -= UpdateUI;
    }
    public class _imageViewModel
    {
        public IBrowserFile? Image { get; set; }
        public string? Display { get; set; }
    }
}
