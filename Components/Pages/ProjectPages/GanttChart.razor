@page "/gantt"
@using Syncfusion.Blazor.Gantt
@using BuildMasterPro.Data
@inject BuildMasterPro.Services.ProjectTaskService TaskService

<MudPaper Elevation="1" Class="pa-0" Style="height:100%;">
    @if (TaskCollection.Count > 0)
    {
        <SfGantt DataSource="@Tasks" Height="100%" Width="100%" ScrollToTaskbarOnClick="true">
            <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="PlannedStartDate" EndDate="PlannedEndDate">
            </GanttTaskFields>
            <GanttColumns>
                <GanttColumn Field="TaskId" HeaderText="Task Id"/>
                <GanttColumn Field="TaskName" HeaderText="Task Name" />
                <GanttColumn Field="PlannedStartDate" HeaderText="Planned Start Date" />
                <GanttColumn Field="PlannedEndDate" HeaderText="Planned End date" />
                <GanttColumn Field="ActualStartDate" HeaderText="Actual Start Date" />
                <GanttColumn Field="ActualEndDate" HeaderText="Actual End date" />
            </GanttColumns>
        </SfGantt>
    }
</MudPaper>



@code {
    private List<TaskData> TaskCollection { get; set; } = new();
    public List<ProjectTask> Tasks { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {

        Tasks = await TaskService.GetCurrentProjtasksAsync();
        foreach(var task in Tasks)
        {
            TaskCollection.Add(
                new TaskData()
                    {
                        TaskId = task.TaskId,
                        TaskName = task.TaskName,
                        StartDate = new DateTime(task.PlannedStartDate.Year, task.PlannedStartDate.Month, task.PlannedStartDate.Day),
                        EndDate = new DateTime(task.PlannedEndDate.Year, task.PlannedEndDate.Month, task.PlannedEndDate.Day)

                    }
            );
        }
    }

    public class TaskData
    {
        public int TaskId { get; set; }
        public string TaskName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Duration { get; set; }
        public int Progress { get; set; }
        public string Predecessor { get; set; }
        public int? ParentId { get; set; }
    }

    public async Task GetTaskCollectionAsync()
    {
        // TaskCollection = new List<TaskData>() {
        //     // new TaskData() { TaskId = 1, TaskName = "Project initiation", StartDate = new DateTime(2022, 04, 05), EndDate = new DateTime(2022, 04, 21), },
        //     new TaskData() { TaskId = 2, TaskName = "Identify Site location", StartDate = new DateTime(2022, 04, 05), Duration = "4", Progress = 50 },
        //     new TaskData() { TaskId = 3, TaskName = "Perform soil test", StartDate = new DateTime(2022, 04, 05), Duration = "4", Progress = 50, Predecessor = "2" }
        // };

        


    }
}


@* @page "/gantt"
@using BuildMasterPro.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Context
@inject Blazored.LocalStorage.ILocalStorageService LS
@inject BuildMasterPro.Services.ProjectService ProjectService

<h3>GanttChart of @Project!.ProjectName</h3>

@code {
    [SupplyParameterFromQuery]
    public int ProjectId { get; set; }

    public Project? Project { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Project = await ProjectService.GetCurrentProjectAsync();
    }
} *@
