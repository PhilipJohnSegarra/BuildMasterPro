@page "/projecttasks/create"
@using Microsoft.EntityFrameworkCore
@using BuildMasterPro.Data
@inject IDbContextFactory<BuildMasterPro.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject BuildMasterPro.Services.ProjectService ProjectService
@inject BuildMasterPro.Services.ProjectTaskService TaskService

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>ProjectTask</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="ProjectTask" OnValidSubmit="AddProjectTask" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="projectid" class="form-label">ProjectId:</label> 
                <InputNumber id="projectid" @bind-Value="ProjectTask.ProjectId" class="form-control" aria-required="true"/>
                <ValidationMessage For="() => ProjectTask.ProjectId" class="text-danger" />
            </div>        
            <div class="mb-3">
                <label for="taskname" class="form-label">TaskName:</label> 
                <InputText id="taskname" @bind-Value="ProjectTask.TaskName" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => ProjectTask.TaskName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="taskdescription" class="form-label">TaskDescription:</label> 
                <InputText id="taskdescription" @bind-Value="ProjectTask.TaskDescription" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => ProjectTask.TaskDescription" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="startdate" class="form-label">StartDate:</label> 
                <InputDate id="startdate" @bind-Value="ProjectTask.StartDate" class="form-control" /> 
                <ValidationMessage For="() => ProjectTask.StartDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="duedate" class="form-label">DueDate:</label> 
                <InputDate id="duedate" @bind-Value="ProjectTask.DueDate" class="form-control" /> 
                <ValidationMessage For="() => ProjectTask.DueDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="status" class="form-label">Status:</label> 
                <InputText id="status" @bind-Value="ProjectTask.Status" class="form-control" /> 
                <ValidationMessage For="() => ProjectTask.Status" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="priority" class="form-label">Priority:</label> 
                <InputText id="priority" @bind-Value="ProjectTask.Priority" class="form-control" /> 
                <ValidationMessage For="() => ProjectTask.Priority" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/projecttasks">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private ProjectTask ProjectTask { get; set; } = new();

    public Project Project { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Project = ProjectService.CurrentProject;
        ProjectTask.ProjectId = Project.ProjectId;
        await TaskService.CreateProjectTaskAsync(ProjectTask);
    }
    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddProjectTask()
    {
        using var context = DbFactory.CreateDbContext();
        context.ProjectTask.Add(ProjectTask);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/projecttasks");
    }
}
