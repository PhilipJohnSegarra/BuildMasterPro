@page "/projecttasks"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BuildMasterPro.Data
@rendermode InteractiveServer
@inject BuildMasterPro.Services.ProjectService ProjectService
@inject BuildMasterPro.Services.ProjectTaskService TaskService
@inject MudBlazor.IDialogService DialogService

<MudPopoverProvider />
<MudDialogProvider />
<MudThemeProvider />

<PageTitle>Tasks</PageTitle>

<h1>Tasks</h1>

<p>
    <a href="projecttasks/create">Create New</a>
</p>

@* <QuickGrid Class="table" Items="Tasks.AsQueryable()">
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="projecttask => projecttask.ProjectId" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="projecttask => projecttask.TaskName" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="projecttask => projecttask.TaskDescription" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="projecttask => projecttask.StartDate" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="projecttask => projecttask.DueDate" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="projecttask => projecttask.Status" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="projecttask => projecttask.Priority" />

    <Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn Context="projecttask">
        <a href="@($"projecttasks/edit?taskid={projecttask.TaskId}")">Edit</a> |
        <a href="@($"projecttasks/details?taskid={projecttask.TaskId}")">Details</a> |
        <a href="@($"projecttasks/delete?taskid={projecttask.TaskId}")">Delete</a>
    </Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>
</QuickGrid> *@

<MudTable Items="Tasks" Hover="true"
    MultiSelection="false"
    Virtualize="false"
    Dense="false"
    GroupBy="_groupDefinition">
    <HeaderContent>
        <MudTh>Task</MudTh>
        <MudTh>Category</MudTh>
        <MudTh>Planned Start Date</MudTh>
        <MudTh>Actual Start Date</MudTh>
        <MudTh>Planned End Date</MudTh>
        <MudTh>Actual End Date</MudTh>
        <MudTh>Status</MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group SecondaryBG" colspan="7"><h4 class="MainText">@($"{context.GroupName}: {context.Key}")</h4></MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd><span><MudIcon Icon="@Icons.Material.Outlined.Task">sdfs</MudIcon></span>@context.TaskName</MudTd>
        <MudTd>@(context.CategoryId != null? context.TaskCategory.CategoryName : "")</MudTd>
        <MudTd>@context.PlannedStartDate</MudTd>
        <MudTd>@context.ActualStartDate</MudTd>
        <MudTd>@context.PlannedEndDate</MudTd>
        <MudTd>@context.ActualEndDate</MudTd>
        <MudTd>@context.Status</MudTd>
    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="7"></MudTh>
    </GroupFooterTemplate>
</MudTable>

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

@code {

    [Parameter]
    public Project Project { get; set; } = new();

    public List<ProjectTask> Tasks { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Tasks = await TaskService.GetCurrentProjtasksAsync();
        Tasks.OrderBy(p => p.TaskId);
    }
    private TableGroupDefinition<ProjectTask> _groupDefinition = new()
        {
            GroupName = "Category",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (e) => e.TaskCategory.CategoryName
        };

}
