@page "/projecttasks"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BuildMasterPro.Data
@rendermode InteractiveServer
@inject BuildMasterPro.Services.ProjectService ProjectService
@inject BuildMasterPro.Services.ProjectUserService ProjUserService
@inject BuildMasterPro.Services.ProjectTaskService TaskService
@inject BuildMasterPro.Services.TaskUserService TaskUserService
@inject BuildMasterPro.Services.UserService userService
@inject NavigationManager NavManager
@inject MudBlazor.IDialogService DialogService

<MudPopoverProvider />
<MudDialogProvider />
<MudThemeProvider />

<PageTitle>Tasks</PageTitle>

@* <p>
    <a href="projecttasks/create">Create New</a>
</p> *@
<MudStack Class="MainBG" Style="height:100%;position:relative;overflow-y:auto;border-radius:15px;">
    <MudTabs PanelClass="overflow-y-auto" Style="height:100%;" Border="true">
        <MudTabPanel Text="@taskCountString">
            <MudItem lg="12">
                <MudPaper Elevation="3" Class="mb-1 pa-0 d-flex flex-row justify-space-between align-center" Style="position:sticky;top:0;right:0;z-index:100;height:40px;">
                    <MudToolBar Dense="true" Class="pa-0 mud-width-full" WrapContent="true">
                        @* <MudPaper Class="d-flex flex-column justify-center align-center PrimaryBG ps-8 pe-8" Elevation="0" Style="height:100%;border-radius:0;">
                        <MudText Class="MainText ma-0" style="font-size:18px;">Tasks</MudText>
                        </MudPaper> *@

                        <MudButton StartIcon="@Icons.Material.Outlined.Add" Size="Size.Small" Class="ms-3 me-3"
                                   OnClick="@(()=>{
                            ProjectTask newTask = new();
                            newTasks.Add(newTask);})">
                            New Task
                        </MudButton>
                        <MudButton StartIcon="@Icons.Material.Outlined.Edit" Size="Size.Small" Class="ms-3 me-3"
                                   OnClick="@(()=>{_taskeditorOpen = !_taskeditorOpen; _multiSelection = !_multiSelection;})">
                            Edit
                        </MudButton>
                        <MudButton StartIcon="@Icons.Material.Outlined.SelectAll" Size="Size.Small" Class="ms-3 me-3"
                                   OnClick="@(()=>{_taskeditorOpen = !_taskeditorOpen;_multiSelection = !_multiSelection;})">
                            Select
                        </MudButton>
                        <MudButton StartIcon="@Icons.Material.Outlined.Save" Size="Size.Small" Class="ms-3 me-3"
                                   Disabled="@(newTasks.Count > 0  || selectedTasks.Count > 0 ? false : true)"
                                   OnClick="@(async ()=>{
                        await SaveNewTasks();
                        })">
                            Save
                        </MudButton>
                        <MudButton StartIcon="@Icons.Material.Outlined.Delete" Size="Size.Small" Class="ms-3 me-3"
                                   Disabled="@(selectedTasks.Count > 0 ? false : true)"
                                   OnClick="@(async()=>{_taskeditorOpen = !_taskeditorOpen;_multiSelection = !_multiSelection;await DeleteTask();})">
                            Delete
                        </MudButton>
                        <MudButton StartIcon="@Icons.Material.Outlined.Cancel" Size="Size.Small" Class="ms-3 me-3"
                                   Disabled="@(newTasks.Count > 0  || selectedTasks.Count > 0 ? false : true)"
                                   OnClick="@(async ()=>{
                        newTasks = new();
                        selectedTasks = new();
                        })">
                            Cancel
                        </MudButton>
                        <MudDivider Vertical="true" FlexItem="true" Style="height:70%;margin:auto auto auto 0;" />
                        <MudChipSet T="string" @bind-SelectedValues="statusFilter" SelectionMode="SelectionMode.MultiSelection" CheckMark>
                            <MudChip Value="@("My Tasks")" Variant="Variant.Text" Color="Color.Info" />
                            <MudChip Value="@("Not Started")" Variant="Variant.Text" Color="Color.Default" Disabled="@(statusFilter.Contains("My Tasks"))" />
                            <MudChip Value="@("In Progress")" Variant="Variant.Text" Color="Color.Warning" Disabled="@(statusFilter.Contains("My Tasks"))"/>
                            <MudChip Value="@("On Hold")" Variant="Variant.Text" Color="Color.Dark" Disabled="@(statusFilter.Contains("My Tasks"))" />
                            <MudChip Value="@("Abandoned")" Variant="Variant.Text" Color="Color.Error" Disabled="@(statusFilter.Contains("My Tasks"))" />
                            <MudChip Value="@("Finished")" Variant="Variant.Text" Color="Color.Success" Disabled="@(statusFilter.Contains("My Tasks"))" />
                        </MudChipSet>
                        <MudDivider Vertical="true" FlexItem="true" Style="height:70%;margin:auto 0 auto auto;" />
                        <MudTooltip Text="@(_dense? "Density Large" : "Density Small")">
                            <MudToggleIconButton Icon="@Icons.Material.Outlined.DensitySmall"
                                                 ToggledIcon="@Icons.Material.Outlined.DensityLarge"
                                                 Size="Size.Small" Class="ms-3 me-3"
                                                 @bind-Toggled="_dense">
                            </MudToggleIconButton>
                        </MudTooltip>

                        <MudDivider Vertical="true" FlexItem="true" Style="height:70%;margin:auto 0 auto 0;" />
                        <MudButton OnClick="GoToCategories" StartIcon="@Icons.Material.Outlined.Category" Size="Size.Small" Class="ps-3 pe-3">
                            Categories
                        </MudButton>
                    </MudToolBar>
                </MudPaper>
                @*Task Adder*@
                @if (newTasks.Count != 0)
                {
                    _taskAdderOpen = true;
                    <MudPaper Class="bg-white mb-1 pt-8 pb-3">
                        <MudStack Class="p-0">
                            @foreach (var task in newTasks)
                            {
                                <BuildMasterPro.Components.Pages.ProjectPages.ProjectTaskPages.TaskAdder ProjectTask="task" />
                            }
                        </MudStack>
                    </MudPaper>
                }
                @*Task Editor*@
                @if (selectedTasks.Count != 0)
                {
                    <MudPaper Class="bg-white mb-1 pt-8 pb-3">
                        <MudStack Class="p-0">
                            @foreach (var task in selectedTasks)
                            {
                                <BuildMasterPro.Components.Pages.ProjectPages.ProjectTaskPages.TaskEditor ProjectTask="task" />
                            }
                        </MudStack>
                    </MudPaper>

                }
                @*Task Categories*@
                @if (_categoriesOpen)
                {
                    <MudPaper Class="TransparentBG mb-1 pt-8 pb-3">
                        <Categories />
                    </MudPaper>
                }
                <MudTable Items="@(Tasks.Where(i => statusFilter.Count == 0 || statusFilter.Contains(i.Status) || statusFilter.Contains("My Tasks") && TaskUsers.Any(x=>x.TaskId == i.TaskId) ))" Hover="true"
                          Class="MainBG"
                          T="ProjectTask"
                          MultiSelection="_multiSelection"
                          Virtualize="false"
                          Dense="_dense"
                          GroupBy="_groupDefinition"
                          OnRowClick="GoToTask"
                          @bind-SelectedItems="selectedTasks"
                          Bordered="false"
                          RowClass="NoBorder"
                          HeaderClass="TransparentBG"
                          FixedHeader="true"
                          Loading="_loading">
                    <HeaderContent>
                        <MudTh></MudTh>
                        <MudTh>Task</MudTh>
                        <MudTh>Planned Start Date</MudTh>
                        <MudTh>Planned End Date</MudTh>
                        <MudTh>Actual Start Date</MudTh>
                        <MudTh>Actual End Date</MudTh>
                        <MudTh>AssignedTo</MudTh>
                        <MudTh>Status</MudTh>
                    </HeaderContent>
                    <GroupHeaderTemplate>
                        <MudTh Class="mud-table-cell-custom-group SecondaryBG" colspan="8"><h4 class="MainText">@($"{context.GroupName}: {context.Key}")</h4></MudTh>
                    </GroupHeaderTemplate>
                    <RowTemplate>
                        <MudTd>@((Tasks.IndexOf(context) + 1).ToString())</MudTd>
                        <MudTd><MudText Class="SecondaryText" Style="font-weight:bold;">@context.TaskName</MudText></MudTd>
                        <MudTd>@context.PlannedStartDate.Date.ToShortDateString()</MudTd>
                        <MudTd>@context.PlannedEndDate.Date.ToShortDateString()</MudTd>
                        <MudTd>@context.ActualStartDate?.Date.ToShortDateString()</MudTd>
                        <MudTd>@context.ActualEndDate?.Date.ToShortDateString()</MudTd>
                        <MudTd>
                            @if (context.TaskUsers != null)
                            {
                                <MudStack Row="true" Style="max-width:200px;" Wrap="Wrap.Wrap">
                                    @foreach (var user in context.TaskUsers)
                                    {

                                        <MudTooltip Class="SecondaryBG pa-3">
                                            <ChildContent>
                                                <a href="team" style="cursor:pointer;">
                                                    <MudAvatar Class="m-0 p-0" Style="" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small">
                                                        <MudImage Src="@(projectUsers.SingleOrDefault(i => i.UserId == user.UserId).User.ProfilePictureUrl)" />
                                                    </MudAvatar>
                                                </a>
                                                
                                            </ChildContent>
                                            <TooltipContent>
                                                <MudStack Class="">
                                                    <MudAvatar>
                                                        <MudImage Src="@(projectUsers.SingleOrDefault(i => i.UserId == user.UserId).User.ProfilePictureUrl)" />
                                                    </MudAvatar>
                                                    <MudText Class="MainText">@(projectUsers.SingleOrDefault(i => i.UserId == user.UserId).User.FirstName + " " + projectUsers.SingleOrDefault(i => i.UserId == user.UserId).User.LastName)</MudText>
                                                </MudStack>
                                            </TooltipContent>
                                        </MudTooltip>
                                    }
                                </MudStack>
                            }
                            else
                            {
                                <MudText>UnAssigned</MudText>
                            }

                        </MudTd>
                        <MudTd>
                            @{
                                if (context.Status == "Not Started"){<MudChip T="string" Color="Color.Dark">@context.Status</MudChip>}
                                else if (context.Status == "In Progress"){<MudChip T="string" Color="Color.Warning">@context.Status</MudChip>}
                                else if (context.Status == "On Hold"){<MudChip T="string" Color="Color.Secondary">@context.Status</MudChip>}
                                else if (context.Status == "Abandoned"){<MudChip T="string" Color="Color.Error">@context.Status</MudChip>}
                                else if (context.Status == "Finished"){<MudChip T="string" Color="Color.Success">@context.Status</MudChip>}
                            }
                         </MudTd>
                    </RowTemplate>
                    <GroupFooterTemplate>
                        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="7"></MudTh>
                    </GroupFooterTemplate>
                </MudTable>
            </MudItem>
        </MudTabPanel>
        <MudTabPanel Text="Gantt Chart">
            <GanttChart Tasks="Tasks"/>
        </MudTabPanel>
    </MudTabs>
    
</MudStack>






<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }

    .NoBorder{
        border:none;
    }

</style>

@code {

    [Parameter]
    public Project Project { get; set; } = new();
    public List<ProjectTask> Tasks { get; set; } = new();
    private List<ProjectTask> newTasks { get; set; } = new();
    private List<ProjectUser> projectUsers { get; set; } = new();
    private HashSet<ProjectTask> selectedTasks { get; set; } = new();
    private ApplicationUser? CurrentUser { get; set; } = new();

    bool _taskAdderOpen = false;
    bool _taskeditorOpen = false;
    bool _multiSelection = false;
    bool _categoriesOpen = false;
    bool _dense = false;
    bool _loading = true;
    string taskCountString = "Tasks";

    private IReadOnlyCollection<string> statusFilter = [];
    int taskCount = 0;
    private List<string> editEvents = new();
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    private ProjectTask selectedItem1 = null;
    private ProjectTask elementBeforeEdit;
    private HashSet<ProjectTask> selectedItems1 = new HashSet<ProjectTask>();
    private TaskUser? TaskUser = new();
    private List<TaskUser>? TaskUsers = new();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;
    private IEnumerable<ProjectTask> Elements = new List<ProjectTask>();

    protected override async Task OnInitializedAsync()
    {
        await InitializeProps();

    }
    private async Task InitializeProps()
    {
        Tasks = await TaskService.GetCurrentProjtasksAsync();
        Tasks.OrderBy(p => p.TaskId);
        selectedTasks = new();
        _loading = false;
        taskCount = Tasks.Count;
        taskCountString = $"Tasks ({taskCount})";
        projectUsers = await ProjUserService.GetAllByCurrentProject();
        CurrentUser = await userService.GetCurrentUserAsync();
        TaskUser = await TaskUserService.GetAsync(i => i.UserId == CurrentUser.Id);
        TaskUsers = await TaskUserService.GetAllAsync(i => i.UserId.Equals(TaskUser.UserId));

    }
    private TableGroupDefinition<ProjectTask> _groupDefinition = new()
    {
        GroupName = "Category",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = true,
        Selector = (e) => e.TaskCategory?.CategoryName ?? "Uncategorized"
    };

    private async Task SaveNewTasks()
    {
        if (_taskAdderOpen)
        {
            _loading = true;
            var result = await TaskService.AddMany(newTasks);
            // foreach (var task in newTasks)
            // {
            //     if (task.TaskUsers != null) await TaskUserService.AddMany(task.TaskUsers.ToList());
            // }

            if (result != null) newTasks = new();
            await InitializeProps();
            _taskAdderOpen = false;
            _loading = false;
            StateHasChanged();

        }
        if (_taskeditorOpen)
        {
            _loading = true;
            foreach(var task in selectedTasks)
            {
                List<TaskUser> removableTasks = new();
                List<TaskUser> newTasks = new();
                await TaskService.UpdateProjectTaskAsync(task);
                var taskUsers = await TaskUserService.GetByTask(task);//get current task users in database
                foreach(var user in taskUsers)
                {
                    if (!task.TaskUsers.Contains(user))
                    {
                        removableTasks.Add(user);
                    }
                }
                foreach(var user in task.TaskUsers)
                {
                    if (!taskUsers.Contains(user))
                    {
                        var newTaskUser = new TaskUser
                        {
                            TaskId = user.TaskId,
                            UserId = user.UserId
                        };
                        newTasks.Add(user);
                    }
                }
                await TaskUserService.RemoveMany(removableTasks);
                await TaskUserService.AddMany(newTasks);
            }
            await InitializeProps();
            _loading = false;

            StateHasChanged();
        }

    }
    async Task GoToTask(TableRowClickEventArgs<ProjectTask> eventArgs)
    {
        var task = eventArgs.Item;
        NavManager.NavigateTo($"projecttasks/details?taskid={task.TaskId}");
    }
    void GoToCategories()
    {
        //NavManager.NavigateTo("/task/categories");
        _categoriesOpen = !_categoriesOpen;
    }
    async Task DeleteTask()
    {
        _loading = true;
        foreach(var task in selectedTasks)
        {
            await TaskService.DeleteProjectTaskAsync(task.TaskId);
        }
        await InitializeProps();
        _loading = false;
    }

}