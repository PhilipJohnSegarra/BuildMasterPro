@page "/projecttasks"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BuildMasterPro.Data
@rendermode InteractiveServer
@inject BuildMasterPro.Services.ProjectService ProjectService
@inject BuildMasterPro.Services.ProjectUserService ProjUserService
@inject BuildMasterPro.Services.ProjectTaskService TaskService
@inject BuildMasterPro.Services.TaskUserService TaskUserService
@inject MudBlazor.IDialogService DialogService

<MudPopoverProvider />
<MudDialogProvider />
<MudThemeProvider />

<PageTitle>Tasks</PageTitle>

@* <p>
    <a href="projecttasks/create">Create New</a>
</p> *@
<MudPaper Elevation="25" Class="mb-1">
    <MudToolBar Dense="true">
        <MudText Class="pe-5" style="font-size:14px;">Tasks</MudText>
        <MudButton StartIcon="@Icons.Material.Outlined.Add" Size="Size.Small" Class="ms-3 me-3"
                   OnClick="@(()=>{
                                ProjectTask newTask = new();
                                newTasks.Add(newTask);})">
            New Task
        </MudButton>
        <MudButton StartIcon="@Icons.Material.Outlined.Edit" Size="Size.Small" Class="ms-3 me-3">
            Edit
        </MudButton>
        <MudButton StartIcon="@Icons.Material.Outlined.SelectAll" Size="Size.Small" Class="ms-3 me-3"
                   OnClick="@(()=>{_multiSelection = !_multiSelection;})">
            Select
        </MudButton>
        <MudButton StartIcon="@Icons.Material.Outlined.Save" Size="Size.Small" Class="ms-3 me-3"
                   Disabled="@(newTasks.Count != 0 ? false : true)"
                   OnClick="@(async ()=>{
                            await SaveNewTasks();
                            })">
            Save
        </MudButton>
        <MudButton StartIcon="@Icons.Material.Outlined.Cancel" Size="Size.Small" Class="ms-3 me-3"
                   Disabled="@(newTasks.Count != 0 ? false : true)"
                   OnClick="@(async ()=>{
                            newTasks = new();
                            })">
            Cancel
        </MudButton>
        <MudDivider Vertical="true" FlexItem="true" Style="height:70%;margin:auto 0 auto 0;" />
        <MudTooltip Text="@(_dense? "Density Large" : "Density Small")">
            <MudToggleIconButton Icon="@Icons.Material.Outlined.DensitySmall"
                                 ToggledIcon="@Icons.Material.Outlined.DensityLarge"
                                 Size="Size.Small" Class="ms-3 me-3"
                                 @bind-Toggled="_dense">
            </MudToggleIconButton>
        </MudTooltip>
        
        <MudDivider Vertical="true" FlexItem="true" Style="height:70%;margin:auto 0 auto 0;" />
        <MudButton StartIcon="@Icons.Material.Outlined.Category" Size="Size.Small" Class="ps-3 pe-3 ms-auto">
            Categories
        </MudButton>
    </MudToolBar>
</MudPaper>

@if (newTasks.Count != 0)
{
    <MudPaper Class="bg-white mb-1 pb-3">
        <MudStack Class="p-0">
            @foreach(var task in newTasks)
            {
                <BuildMasterPro.Components.Pages.ProjectPages.ProjectTaskPages.TaskAdder ProjectTask="task" />
            }
        </MudStack>
    </MudPaper>
    
    
}

@* <QuickGrid Class="table" Items="Tasks.AsQueryable()">
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="projecttask => projecttask.ProjectId" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="projecttask => projecttask.TaskName" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="projecttask => projecttask.TaskDescription" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="projecttask => projecttask.StartDate" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="projecttask => projecttask.DueDate" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="projecttask => projecttask.Status" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="projecttask => projecttask.Priority" />

    <Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn Context="projecttask">
        <a href="@($"projecttasks/edit?taskid={projecttask.TaskId}")">Edit</a> |
        <a href="@($"projecttasks/details?taskid={projecttask.TaskId}")">Details</a> |
        <a href="@($"projecttasks/delete?taskid={projecttask.TaskId}")">Delete</a>
    </Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>
</QuickGrid> *@

<MudTable Items="Tasks" Hover="true"
    MultiSelection="_multiSelection"
    Virtualize="false"
    Dense="_dense"
    GroupBy="_groupDefinition">
    <HeaderContent>
        <MudTh>Task</MudTh>
        <MudTh>Category</MudTh>
        <MudTh>Planned Start Date</MudTh>
        <MudTh>Actual Start Date</MudTh>
        <MudTh>Planned End Date</MudTh>
        <MudTh>Actual End Date</MudTh>
        <MudTh>AssignedTo</MudTh>
        <MudTh>Status</MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group SecondaryBG" colspan="8"><h4 class="MainText">@($"{context.GroupName}: {context.Key}")</h4></MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd><span><MudIcon Icon="@Icons.Material.Outlined.Task">sdfs</MudIcon></span>@context.TaskName</MudTd>
        <MudTd>@(context.CategoryId != null? context.TaskCategory.CategoryName : "")</MudTd>
        <MudTd>@context.PlannedStartDate.Date.ToShortDateString()</MudTd>
        <MudTd>@context.ActualStartDate?.Date.ToShortDateString()</MudTd>
        <MudTd>@context.PlannedEndDate.Date.ToShortDateString()</MudTd>
        <MudTd>@context.ActualEndDate?.Date.ToShortDateString()</MudTd>
        <MudTd>
            @if(context.TaskUsers != null)
            {
                <MudStack Row="true">
                    @foreach (var user in context.TaskUsers.Take(3))
                    {
                        <MudAvatar Class="m-0 p-0" Style="" Color="Color.Success" Variant="Variant.Outlined" Size="Size.Small">
                            @(projectUsers.SingleOrDefault(i => i.UserId == user.UserId).User.Email[0])
                        </MudAvatar>
                    }
                </MudStack>
            }
            else
            {
                <MudText>UnAssigned</MudText>
            }

        </MudTd>
        <MudTd>@context.Status</MudTd>
    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="7"></MudTh>
    </GroupFooterTemplate>
</MudTable>

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

@code {

    [Parameter]
    public Project Project { get; set; } = new();
    public List<ProjectTask> Tasks { get; set; } = new();
    private List<ProjectTask> newTasks { get; set; } = new();
    private List<ProjectUser> projectUsers { get; set; } = new();

    bool _taskAdderOpen = false;
    bool _multiSelection = false;
    bool _dense = false;

    protected override async Task OnInitializedAsync()
    {
        await InitializeProps();
        projectUsers = await ProjUserService.GetAllByCurrentProject();
    }
    private async Task InitializeProps()
    {
        Tasks = await TaskService.GetCurrentProjtasksAsync();
        Tasks.OrderBy(p => p.TaskId);
    }
    private TableGroupDefinition<ProjectTask> _groupDefinition = new()
    {
        GroupName = "Category",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.TaskCategory?.CategoryName ?? "Uncategorized"
    };

    private async Task SaveNewTasks()
    {
        var result = await TaskService.AddMany(newTasks);
        foreach(var task in newTasks)
        {
            if(task.TaskUsers != null) await TaskUserService.AddMany(task.TaskUsers.ToList());
        }

        if (result != null) newTasks = new();
        await InitializeProps();
        StateHasChanged();
    }

}