@page "/projecttasks/details"
@using Microsoft.EntityFrameworkCore
@using BuildMasterPro.Data
@using BuildMasterPro.Services
@using BuildMasterPro.Components.Pages.Dialogs
@inject IDbContextFactory<BuildMasterPro.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject ProjectTaskService TaskService
@inject TaskActivityService taskActService
@inject ProjectService ProjectService
@inject ProjectUserService puService
@inject TaskUserService tuService;
@inject UserService Userservice
@inject IDialogService DialogService
@inject TaskActivityImagesService actImagesService
@inject IJSRuntime JS

<MudDialogProvider FullWidth="true" MaxWidth="MaxWidth.Medium" />
<MudThemeProvider/>
<MudPopoverProvider />

@if (loading)
{
    <Loader/>
}

@if (_AdderOpen)
{
    <MudPaper Class="TransparentBG d-flex flex-column justify-center align-center" Style="position:fixed;top:0;left:0;height:100vh;width:100vw;z-index:1000;">
        <MudPaper Class="transparentBg" @onclick="@(()=>{_AdderOpen = !_AdderOpen;})" Style="position:absolute;width:100%;height:100%;top:0;left:0">

        </MudPaper>
        <MudPaper Class="pa-5" Style="width:60vw;height:60vh;overflow:auto;z-index:13;position:relative;">
            <MudToolBar Class="d-flex flex-row justify-space-between align-center ">
                <MudText Style="font-size:15px;margin:0 0 0 0;">Select Project Members</MudText>
                <MudTextField Immediate="true" @bind-Value="filterUser" Class="my-rounded-textfield" Placeholder="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" Style="max-width:300px;font-size:15px;border-radius:40px;height:40px;margin:0 auto;" />
                <MudIconButton Icon="@Icons.Material.Outlined.Close" OnClick="@(()=>{_AdderOpen = !_AdderOpen;})" />
            </MudToolBar>
            <MudList T="ProjectUser" Style="flex-grow:1;overflow:auto;height:70%;" SelectionMode="SelectionMode.MultiSelection" @bind-SelectedValues="Selected">
                @foreach (var item in UnAssignedToTask.Where(i => string.IsNullOrEmpty(filterUser) || i.User.FirstName.ToLower().Contains(filterUser.ToLower()) || i.User.LastName.ToLower().Contains(filterUser.ToLower())))
                {
                    <MudListItem T="ProjectUser" Value="item">
                        @*                         @(string.IsNullOrEmpty(item.FirstName) ? item.Email : string.Concat(item.FirstName + " " + item.LastName))
                *@                      <div style="display:flex;flex-direction:row;justify-content:start;align-items:center;">
                            <span style="margin:0 1rem 0 1rem;"><MudAvatar Size="Size.Small"><MudImage class="mud-width-full" Src="@item.User.ProfilePictureUrl" /></MudAvatar></span>
                            @(string.IsNullOrEmpty(item.User.FirstName) ? item.User.Email : string.Concat(item.User.FirstName + " " + item.User.LastName))
                        </div>
                    </MudListItem>
                }
            </MudList>
            <MudFab Class="PrimaryBG MainText" Style="position:absolute;bottom:2rem;right:2rem;z-index:14;" OnClick="AddTaskUsers" StartIcon="@Icons.Material.Outlined.Check">
            </MudFab>
        </MudPaper>

    </MudPaper>

}

<MudPaper Class="TransparentBG" Elevation="0" Style="height:100%;">
    <MudGrid Style="height:100%;" Spacing="1">
        <MudItem xs="12" md="12" lg="8" Style="height:100%;">
            <MudPaper Class="pa-0 pt-0" Style="overflow-y:auto;height:100%;">
                <MudToolBar Class="justify-space-between overflow-visible sticky-top pa-0" Style="width:100%;position:sticky;top: -10px;z-index:100;">
                    <MudPaper Class="pa-2 d-flex flex-row justify-space-between align-center" Style="width:100%;border-radius:0;">
                        <MudIconButton Icon="@Icons.Material.Outlined.ArrowBack" OnClick="GoBack" />
                        <MudText Class="SecondaryText" Style="font-size:18px;font-weight:bold;">@projecttask.TaskName</MudText>
                        <MudText Style="margin:0 auto 0 auto;">Activities & Updates</MudText>
                        <MudButton OnClick="OpenDialogAsync" Class="PrimaryBG MainText customFabButton" Style="padding:4px 15px 4px 15px;margin:0 10px 0 auto;" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small">
                            New Activity
                        </MudButton>
                        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small">
                            <MudButton>@projecttask.Status</MudButton>
                            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                                <MudMenuItem OnClick="@(() => {projecttask.Status = "Not Started";if(projecttask.ActualStartDate != null)projecttask.ActualStartDate = null; projecttask.Progress = 0;UpdateTask();})">Mark as Not Started</MudMenuItem>
                                <MudMenuItem OnClick="@(() => {if(projecttask.Progress == 100){projecttask.Progress -= 10; projecttask.ActualEndDate = null;}projecttask.Status = "In Progress";if(projecttask.ActualStartDate == null)projecttask.ActualStartDate = DateTime.UtcNow;UpdateTask();})">Mark as In Progress</MudMenuItem>
                                <MudMenuItem OnClick="@(() => {projecttask.Status = "On Hold";UpdateTask();})">Mark as On Hold</MudMenuItem>
                                <MudMenuItem OnClick="@(() => {projecttask.Status = "Abandoned";UpdateTask();})">Mark as Abandoned</MudMenuItem>
                                <MudMenuItem OnClick="@(() => {
projecttask.Status = "Finished";projecttask.Progress = 100; if(projecttask.ActualStartDate == null) projecttask.ActualStartDate = DateTime.UtcNow;projecttask.ActualEndDate = DateTime.UtcNow;UpdateTask();})">Mark as Finished</MudMenuItem>
                            </MudMenu>
                        </MudButtonGroup>
                    </MudPaper>
                </MudToolBar>
                <MudStack Class="pb-3 mt-3 pa-3 d-flex flex-column justify-center align-center" Elevation="0">
                   
                    @foreach (var act in taskActivities)
                    {
                        <MudPaper Class="d-flex flex-column justify-start pa-6 MainBG" Elevation="2" Style="width:98%;">
                            @if (!string.IsNullOrEmpty(act.Name))
                            {
                                <MudPaper Class="d-flex flex-row justify-space-between align-center MainBG" Elevation="0">
                                    
                                    <MudText Class="ms-1 d-flex flex-row justify-start align-center" Style="color:gray;font-size:13px;"><span style="margin-right:1rem;"><MudAvatar Size="Size.Small"><MudImage Class="mud-width-full" Src="@act.User.ProfilePictureUrl"/></MudAvatar></span> @(string.Concat(act.User.FirstName," ",act.User.LastName))</MudText>
                                    <MudText Style="color:gray;font-size:13px;">@act.DateCreated.Date.ToLongDateString() - @act.DateCreated.ToLocalTime().ToShortTimeString()</MudText>
                                </MudPaper>
                                <MudDivider Class="mb-2 mt-2" />
                            }
                            <MudText Style="font-size:17px;margin:1rem 0 1rem 0;font-weight:bold;">@act.Name</MudText>
                            <MudText Class="mt-3" Style="font-size:14px;">@act.Content</MudText>
                            @foreach(var item in Images)
                            {
                                if(item.TaskActivityID == act.Id)
                                {
                                    <MudGrid Class="mt-3" Style="width:100%;" Spacing="1">
                                        @foreach(var link in item.ImageArray)
                                        {
                                            <MudItem lg="4">
                                                <MudImage Width="300" Src="@link" />
                                            </MudItem>
                                        
                                        }
                                        
                                    </MudGrid>
                                    
                                    
                                }
                            }

                        </MudPaper>
                    }
                </MudStack>
            </MudPaper>
                
        </MudItem>
        <MudItem xs="12" md="12" lg="4" Style="height:100%;">
            <MudPaper xs="12" md="12" lg="12" Style="overflow-y:auto;height:100%;">
                <MudTabs Centered="true" Border="true">
                    <MudTabPanel Text="Details">
                        <MudPaper Class="d-flex flex-column justify-center align-center" Elevation="0" Style="max-height:100%;overflow-y:auto;width:100%;">
                            @*BASIC DETAILS*@
                            <MudPaper Elevation="1" Class="pa-4 mt-2" Style="width:98%;border:1px solid gray;">
                                    <MudPaper Elevation="0" Style="width:100%;">
                                        <MudToolBar Class="justify-space-between">
                                            <MudIconButton OnClick="() => {editDetails = !editDetails;}" hidden="@(editDetails == false? true : false)" Icon="@Icons.Material.Outlined.Edit" />
                                        <MudIconButton OnClick="async() => {await UpdateTask();editDetails = !editDetails;}" hidden="@editDetails" Icon="@Icons.Material.Outlined.Save" Color="Color.Tertiary"/>
                                       
                                            <MudIconButton OnClick="() => {editDetails = !editDetails;}" Class="me-auto" hidden="@editDetails" Icon="@Icons.Material.Outlined.Cancel" />
                                        <MudButton Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="DeleteTask">Delete Task</MudButton>
                                        </MudToolBar>
                                    </MudPaper>
                                    <MudTextField Label="Name" Disabled="editDetails" Variant="Variant.Outlined" Style="font-size:12px;" @bind-Value="projecttask.TaskName"/>
                                    <MudTextField Lines="3" Label="Description" Disabled="editDetails" Variant="Variant.Outlined" Style="font-size:12px;" @bind-Value="projecttask.TaskDescription"/>
                                <AuthorizeView Roles="Administrators,Project Manager">
                                    <MudDatePicker Clearable Disabled="editDetails" Date="projecttask.PlannedStartDate" Label="Planned Start Date:" Editable="true" DateChanged="OnPlannedStartDateChanged" Mask="@(new DateMask("dd.MM.yyyy"))" DateFormat="dd.MM.yyyy" Placeholder="@projecttask.PlannedStartDate.ToString()" Variant="Variant.Outlined" Class="mud-width-full" />
                                    <MudDatePicker Clearable Disabled="editDetails" Date="projecttask.PlannedEndDate" Label="Planned End Date:" Editable="true" DateChanged="OnPlannedEndDateChanged" Mask="@(new DateMask("dd.MM.yyyy"))" DateFormat="dd.MM.yyyy" Placeholder="@projecttask.PlannedEndDate.ToString()" Variant="Variant.Outlined" Class="mud-width-full" />
                                    <MudDatePicker Clearable Disabled="editDetails" Date="projecttask.ActualStartDate" Label="Actual Start Date:" Editable="true" DateChanged="OnActualStartDateChanged" Mask="@(new DateMask("dd.MM.yyyy"))" DateFormat="dd.MM.yyyy" Placeholder="@projecttask.ActualStartDate.ToString()" Variant="Variant.Outlined" Class="mud-width-full" />
                                    <MudDatePicker Clearable Disabled="editDetails" Date="projecttask.ActualEndDate" Label="Actual End Date:" Editable="true" DateChanged="OnActualEndDateChanged" Mask="@(new DateMask("dd.MM.yyyy"))" DateFormat="dd.MM.yyyy" Placeholder="@projecttask.ActualEndDate.ToString()" Variant="Variant.Outlined" Class="mud-width-full" />
                                </AuthorizeView>
                                
                                    @* <MudSelect Variant="Variant.Outlined" T="string" @bind-Value="projecttask.Status" Style="font-size:12px;">
                                        <MudSelectItem T="string">
                                            Not Started
                                        </MudSelectItem>
                                        <MudSelectItem T="string">
                                            In Progress
                                        </MudSelectItem>
                                        <MudSelectItem T="string">
                                            On Hold
                                        </MudSelectItem>
                                        <MudSelectItem T="string">
                                            Abandoned
                                        </MudSelectItem>
                                        <MudSelectItem T="string">
                                            Finished
                                        </MudSelectItem>
                                    </MudSelect> *@
                                    @*PROGRESS SLIDER*@
                                    <MudPaper Elevation="1" Class="pa-4 mt-2" Style="width:100%;border:1px solid gray;">
                                        <MudPaper Elevation="0" Class="d-flex flex-row justify-space-between align-center">
                                            <MudText Style="font-size:12px;">Progress</MudText>
                                            <MudText Style="font-size:12px;">@projecttask.Progress.ToString()</MudText>
                                        </MudPaper>
                                        <MudSlider T="int" Min="0" Max="100" @bind-Value="@projecttask.Progress" Disabled="editDetails" />
                                    </MudPaper>
                            </MudPaper>
                            <MudSpacer/>
                            <MudTable Style="width:100%;margin:2rem 0 0 0;" Items="taskUsers" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                                <HeaderContent>
                                    <MudTh Class="d-flex flex-row justify-space-between align-center">Assigned to <MudIconButton Class="ms-auto" Icon="@Icons.Material.Outlined.Add" OnClick="()=>{_AdderOpen = true;}" Color="Color.Warning"/></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd Class="d-flex flex-row justify-space-between align-center" DataLabel="Nr">
                                        <MudStack Row Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                                            <MudAvatar><MudImage Class="mud-width-full" Src="@context.User.ProfilePictureUrl" /></MudAvatar><MudText>@(string.IsNullOrEmpty(context.User.FirstName) ? context.User.Email : string.Concat(context.User.FirstName + " " + context.User.LastName))</MudText>
                                        </MudStack>
                                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="async()=>{await RemoveAsync(context);}" />
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                            
                        </MudPaper>
                    </MudTabPanel>
                    <MudTabPanel Text="Photos">
                        <MudGrid Class="pa-3" Spacing="1">
                            @foreach(var image in Images.Where(i=>i.TaskID == projecttask.TaskId))
                            {
                                if(image.ImageArray != null)
                                foreach(var url in image.ImageArray)
                                {
                                    <MudItem lg="6">
                                        <a style="width:100%;height:100px;" href="@url" target="_blank">
                                            <MudImage ObjectFit="ObjectFit.Cover" Style="width:100%;height:200px;" Src="@url"/>
                                        </a>
                                    </MudItem>
                                }
                                
                            }
                        </MudGrid>
                    </MudTabPanel>
                </MudTabs>
            </MudPaper>

        </MudItem>
    </MudGrid>
</MudPaper>




<style>
    .customFabButton:hover{
        background-color: #FFA800;
    }

    .transparentBg {
        background-color: gray;
        opacity: .5;
    }
</style>

@code {
    private ProjectTask? projecttask { get; set; } = new();

    [SupplyParameterFromQuery]
    private int TaskId { get; set; }

    private List<TaskActivity> taskActivities { get; set; } = new();
    private List<TaskActivityImages> Images { get; set; } = new();
    private List<TaskUser> taskUsers { get; set; } = new();
    private List<ProjectUser> projectUsers { get; set; } = new();
    private List<ProjectUser> UnAssignedToTask { get; set; } = new();

    private bool editDetails = true;

    bool loading = true;
    bool _AdderOpen = false;
    string filterUser = "";
    IReadOnlyCollection<ProjectUser> Selected { get; set; } = new List<ProjectUser>();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        using var context = DbFactory.CreateDbContext();
        projecttask = await TaskService.GetTaskAsync(TaskId);
        taskActivities = await taskActService.GetByTask(projecttask);
        taskUsers = await tuService.GetByTask(projecttask);
        projectUsers = await puService.GetAllByCurrentProject();
        UnAssignedToTask = projectUsers
    .Where(pu => !taskUsers.Any(tu => tu.UserId == pu.UserId))
    .ToList();

        foreach(var act in taskActivities)
        {
            Images = await actImagesService.GetAllAsync();
        }
        if (projecttask is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        loading = false;
    }

    private async Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var parameters = new DialogParameters<TaskActivityAdderDialog>
        {
            {x => x.TaskID, projecttask.TaskId}
        };

        var result = await DialogService.ShowAsync<TaskActivityAdderDialog>("Simple Dialog",parameters, options);

    }
    private async Task UpdateTask()
    {
        if (projecttask.Progress > 0 && projecttask.Progress < 100 && projecttask.Status != "In Progress")
        {
            projecttask.Status = "In Progress";
            if (projecttask.ActualStartDate == null) projecttask.ActualStartDate = DateTime.UtcNow;
        }
        else if((projecttask.Progress >= 100) && projecttask.Status != "Finished")
        {
            projecttask.Status = "Finished";
            if (projecttask.ActualStartDate == null) { projecttask.ActualStartDate = DateTime.UtcNow; }
            if (projecttask.ActualEndDate == null) { projecttask.ActualEndDate = DateTime.UtcNow; }
        }
        else if(projecttask.Status == "On Hold")
        {
            projecttask.Status = "On Hold";
        }

        await TaskService.UpdateProjectTaskAsync(projecttask);

        await InvokeAsync(StateHasChanged);
    }
    private async Task<List<string>> GetImageList(TaskActivity item)
    {
        var items = await actImagesService.GetByTaskActivityId(item.Id);
        if(items != null)
        {
            return items.ImageArray;
        }
        return null;

    }
    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }
    private async Task RemoveAsync(TaskUser user)
    {
        loading = true;
        Selected = new List<ProjectUser>();
        await tuService.Remove(user);
        taskUsers = await tuService.GetByTask(projecttask);

        Selected = new List<ProjectUser>();
        taskUsers = await tuService.GetByTask(projecttask);
        projectUsers = await puService.GetAllByCurrentProject();
        UnAssignedToTask = projectUsers
    .Where(pu => !taskUsers.Any(tu => tu.UserId == pu.UserId))
    .ToList();
        loading = false;
        await InvokeAsync(StateHasChanged);
    }
    private async Task AddTaskUsers()
    {
        loading = true;
        //await puService.AddMany(Selected);
        List<TaskUser> newTaskUsers = new();
        foreach (var user in Selected)
        {
            var newPU = new TaskUser
                {
                    UserId = user.UserId,
                    TaskId = projecttask.TaskId
                };
            newTaskUsers.Add(newPU);
        }
        await tuService.AddMany(newTaskUsers);
        _AdderOpen = !_AdderOpen;
        taskUsers = await tuService.GetByTask(projecttask);
        Selected = new List<ProjectUser>();
        taskUsers = await tuService.GetByTask(projecttask);
        projectUsers = await puService.GetAllByCurrentProject();
        UnAssignedToTask = projectUsers
    .Where(pu => !taskUsers.Any(tu => tu.UserId == pu.UserId))
    .ToList();
        loading = false;
        await InvokeAsync(StateHasChanged);

    }
    //[Inject] private IDialogService DialogService { get; set; }
    string state = "Message box hasn't been opened yet";
    async Task DeleteTask()
    {
        bool? result = await DialogService.ShowMessageBox(
            $"Confirm Deletion:",
            $"Task {projecttask.TaskName} will be deleted.\nTo undo this action, please coordinate with your administrator.",
            yesText: "Delete!", cancelText: "Cancel");
        state = result == null ? "Canceled" : "Deleted!";
        if (state == "Deleted!")
        {
            loading = true;
            await TaskService.DeleteProjectTaskAsync(projecttask.TaskId);
            loading = false;
            NavigationManager.NavigateTo("/projecttasks", forceLoad: true);
        }
        else
        {
            return;
        }
    }
    private void OnActualStartDateChanged(DateTime? newDate)
    {
        projecttask.ActualStartDate = (DateTime)newDate;
    }
    private void OnActualEndDateChanged(DateTime? newDate)
    {
        projecttask.ActualEndDate = (DateTime)newDate;
    }
    private void OnPlannedStartDateChanged(DateTime? newDate)
    {
        projecttask.PlannedStartDate = (DateTime)newDate;
    }
    private void OnPlannedEndDateChanged(DateTime? newDate)
    {
        projecttask.PlannedEndDate = (DateTime)newDate;
    }
}
