@page "/projecttasks/details"
@using Microsoft.EntityFrameworkCore
@using BuildMasterPro.Data
@using BuildMasterPro.Services
@using BuildMasterPro.Components.Pages.Dialogs
@inject IDbContextFactory<BuildMasterPro.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject ProjectTaskService TaskService
@inject TaskActivityService taskActService
@inject ProjectService ProjectService
@inject IDialogService DialogService
@inject TaskActivityImagesService actImagesService

<MudDialogProvider FullWidth="true" MaxWidth="MaxWidth.Medium" />
<MudThemeProvider/>
<MudPopoverProvider />

<MudPaper Class="TransparentBG" Elevation="0" Style="height:100%;">
    <MudGrid Style="height:100%;" Spacing="1">
        <MudItem xs="12" md="12" lg="8" Style="height:100%;">
            <MudPaper Class="pa-0 pt-0" Style="overflow-y:auto;height:100%;">
                <MudToolBar Class="justify-space-between overflow-visible sticky-top pa-0" Style="width:100%;position:sticky;top: -10px;">
                    <MudPaper Class="pa-2 d-flex flex-row justify-space-between align-center" Style="width:100%;border-radius:0;">
                        <MudText Class="SecondaryText" Style="font-size:18px;font-weight:bold;">@projecttask.TaskName</MudText>
                        <MudButton OnClick="OpenDialogAsync" Class="PrimaryBG MainText customFabButton" Style="padding:4px 15px 4px 15px;margin:0 10px 0 auto;" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small">
                            Activity
                        </MudButton>
                        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small">
                            <MudButton>@projecttask.Status</MudButton>
                            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                                <MudMenuItem OnClick="@(() => {projecttask.Status = "Not Started";projecttask.Progress = 0;UpdateTask();})">Mark as Not Started</MudMenuItem>
                                <MudMenuItem OnClick="@(() => {projecttask.Status = "In Progress";projecttask.ActualStartDate = DateTime.UtcNow;UpdateTask();})">Mark as In Progress</MudMenuItem>
                                <MudMenuItem OnClick="@(() => {projecttask.Status = "On Hold";UpdateTask();})">Mark as On Hold</MudMenuItem>
                                <MudMenuItem OnClick="@(() => {projecttask.Status = "Abandoned";UpdateTask();})">Mark as Abandoned</MudMenuItem>
                                <MudMenuItem OnClick="@(() => {projecttask.Status = "Finished";projecttask.Progress = 100;projecttask.ActualEndDate = DateTime.UtcNow;UpdateTask();})">Mark as Finished</MudMenuItem>
                            </MudMenu>
                        </MudButtonGroup>
                    </MudPaper>
                </MudToolBar>
                <MudStack Class="pb-3 mt-3 pa-3 d-flex flex-column justify-center align-center" Elevation="0">
                    <MudText Style="margin:0 auto 0 0;">Activities & Updates</MudText>
                    @foreach (var act in taskActivities)
                    {
                        
                        <MudPaper Class="d-flex flex-column justify-start pa-6 MainBG" Elevation="2" Style="width:98%;">
                            @if (!string.IsNullOrEmpty(act.Name))
                            {
                                <MudPaper Class="d-flex flex-row justify-space-between align-center MainBG" Elevation="0">
                                    <MudText Style="font-size:15px;">@act.Name</MudText>
                                    <MudText Class="ms-1" Style="color:gray;font-size:11px;">posted by @act.User.Email | @act.DateCreated.Date.ToLongDateString() - @act.DateCreated.ToLocalTime().ToShortTimeString()</MudText>
                                </MudPaper>
                                <MudDivider Class="mb-2 mt-2" />
                            }
                            <MudText Class="mt-3" Style="font-size:14px;">@act.Content</MudText>
                            @foreach(var item in Images)
                            {
                                if(item.TaskActivityID == act.Id)
                                {
                                    foreach(var link in item.ImageArray)
                                    {
                                        <MudImage Width="300" Src="@link" />
                                    }
                                    
                                }
                            }

                            
                        </MudPaper>
                    }
                </MudStack>
            </MudPaper>
                
        </MudItem>
        <MudItem xs="12" md="12" lg="4" Style="height:100%;">
            <MudPaper xs="12" md="12" lg="12" Style="overflow-y:auto;height:100%;">
                <MudTabs Centered="true" Border="true">
                    <MudTabPanel Text="Details">
                        <MudPaper Class="d-flex flex-column justify-center align-center" Elevation="0" Style="max-height:100%;overflow-y:auto;width:100%;">
                            @*BASIC DETAILS*@
                            <MudPaper Elevation="1" Class="pa-4 mt-2" Style="width:98%;border:1px solid gray;">
                                    <MudPaper Elevation="0" Style="width:100%;">
                                        <MudToolBar Class="justify-end">
                                            <MudIconButton OnClick="() => {editDetails = !editDetails;}" hidden="@(editDetails == false? true : false)" Icon="@Icons.Material.Outlined.Edit" />
                                        <MudIconButton OnClick="async() => {await UpdateTask();editDetails = !editDetails;}" hidden="@editDetails" Icon="@Icons.Material.Outlined.Save" />
                                            <MudIconButton OnClick="() => {editDetails = !editDetails;}" hidden="@editDetails" Icon="@Icons.Material.Outlined.Cancel" />
                                        </MudToolBar>
                                    </MudPaper>
                                    <MudTextField Label="Name" Disabled="editDetails" Variant="Variant.Outlined" Style="font-size:12px;" @bind-Value="projecttask.TaskName"/>
                                    <MudTextField Lines="3" Label="Description" Disabled="editDetails" Variant="Variant.Outlined" Style="font-size:12px;" @bind-Value="projecttask.TaskDescription"/>
                                    @* <MudSelect Variant="Variant.Outlined" T="string" @bind-Value="projecttask.Status" Style="font-size:12px;">
                                        <MudSelectItem T="string">
                                            Not Started
                                        </MudSelectItem>
                                        <MudSelectItem T="string">
                                            In Progress
                                        </MudSelectItem>
                                        <MudSelectItem T="string">
                                            On Hold
                                        </MudSelectItem>
                                        <MudSelectItem T="string">
                                            Abandoned
                                        </MudSelectItem>
                                        <MudSelectItem T="string">
                                            Finished
                                        </MudSelectItem>
                                    </MudSelect> *@
                                    @*PROGRESS SLIDER*@
                                    <MudPaper Elevation="1" Class="pa-4 mt-2" Style="width:100%;border:1px solid gray;">
                                        <MudPaper Elevation="0" Class="d-flex flex-row justify-space-between align-center">
                                            <MudText Style="font-size:12px;">Progress</MudText>
                                            <MudText Style="font-size:12px;">@projecttask.Progress.ToString()</MudText>
                                        </MudPaper>
                                        <MudSlider T="int" Min="0" Max="100" @bind-Value="@projecttask.Progress" Disabled="editDetails" />
                                    </MudPaper>
                            </MudPaper>
                            
                        </MudPaper>
                    </MudTabPanel>
                    <MudTabPanel Text="Files">

                    </MudTabPanel>
                    <MudTabPanel Text="Resources">

                    </MudTabPanel>
                </MudTabs>
            </MudPaper>

        </MudItem>
    </MudGrid>
</MudPaper>

<style>
    .customFabButton:hover{
        background-color: #FFA800;
    }
</style>

@code {
    private ProjectTask? projecttask { get; set; } = new();

    [SupplyParameterFromQuery]
    private int TaskId { get; set; }

    private List<TaskActivity> taskActivities { get; set; } = new();
    private List<TaskActivityImages> Images { get; set; } = new();

    private bool editDetails = true;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        projecttask = await TaskService.GetTaskAsync(TaskId);
        taskActivities = await taskActService.GetByTask(projecttask);
        foreach(var act in taskActivities)
        {
            Images = await actImagesService.GetAllAsync();
        }
        if (projecttask is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
    private async Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var parameters = new DialogParameters<TaskActivityAdderDialog>
        {
            {x => x.TaskID, projecttask.TaskId}
        };

        var result = await DialogService.ShowAsync<TaskActivityAdderDialog>("Simple Dialog",parameters, options);

    }
    private async Task UpdateTask()
    {
        if (projecttask.Progress > 0 && projecttask.Progress < 100 && projecttask.Status != "In Progress")
        {
            projecttask.Status = "In Progress";
            if (projecttask.ActualStartDate == null) projecttask.ActualStartDate = DateTime.UtcNow;
        }
        else if((projecttask.Progress >= 100) && projecttask.Status != "Finished")
        {
            projecttask.Status = "Finished";
            if (projecttask.ActualStartDate == null) projecttask.ActualStartDate = DateTime.UtcNow;
            if (projecttask.ActualEndDate == null) projecttask.ActualEndDate = DateTime.UtcNow;
        }

        await TaskService.UpdateProjectTaskAsync(projecttask);

        await InvokeAsync(StateHasChanged);
    }
    private async Task<List<string>> GetImageList(TaskActivity item)
    {
        var items = await actImagesService.GetByTaskActivityId(item.Id);
        if(items != null)
        {
            return items.ImageArray;
        }
        return null;

    }
}
