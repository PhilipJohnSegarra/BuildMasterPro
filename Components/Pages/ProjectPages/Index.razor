@page "/projects"
@rendermode InteractiveServer
@using System.ComponentModel
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BuildMasterPro.Data
@using BuildMasterPro.Services
@inject NavigationManager NavManager
@inject ProjectService ProjectService
@inject ProtectedSessionStorage ProtectedSessionStore
@inject UserService userService
@inject ProjectUserService puService
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<MudPopoverProvider />
<MudDialogProvider />
<MudThemeProvider />

<PageTitle>Index</PageTitle>

<h4 style="margin:0 0 1rem 0;">PROJECTS</h4>

        <CascadingAuthenticationState>
            @if (authenticationState != null)
            {
                var user = authenticationState.User;

                if (user.IsInRole("Administrators") || user.IsInRole("Project Manager"))
                {
                    <AuthorizeView Roles="Administrators">
                        <MudDataGrid T="Project" Items="Projects" Bordered="false" Striped="true" Dense="true" RowClick="GoToProject" Hover="true" Style="height:89%;" Groupable="false" Class="full-height-datagrid">
                            <Columns>
                                <MudBlazor.PropertyColumn Property="project => project.ProjectName" Title="Project" CellClass="row" HeaderStyle="height:60px;width:40%;font-weight:bold;" />
                                <MudBlazor.PropertyColumn Property="project => project.Startdate.ToShortDateString()" Title="Start Date" CellClass="row" HeaderStyle="height:60px;width:20%;font-weight:bold;" />
                                <MudBlazor.PropertyColumn Property="project => project.Enddate.ToShortDateString()" Title="End Date" CellClass="row" HeaderStyle="height:60px;width:20%;font-weight:bold;" />
                                <MudBlazor.TemplateColumn Title="Status" HeaderStyle="height:60px;width:40%;font-weight:bold;">
                                    <CellTemplate Context="contxt">
                                        @{
                                            if (contxt.Item.Startdate > DateTime.Now)
                                            {
                                                <MudChip T="string" Color="Color.Dark">Not Started</MudChip>
                                            }
                                            else if (contxt.Item.Startdate <= DateTime.Now && contxt.Item.Enddate >= DateTime.Now)
                                            {
                                                <MudChip T="string" Color="Color.Warning">In Progress</MudChip>
                                            }
                                            else if (contxt.Item.Enddate <= DateTime.Now)
                                            {
                                                <MudChip T="string" Color="Color.Success">Ended</MudChip>
                                            }
                                        }
                                    </CellTemplate>
                                </MudBlazor.TemplateColumn>
                                <MudBlazor.TemplateColumn CellClass="d-flex justify-center " HeaderStyle="height:60px;width:5%;font-weight:bold;">
                                    <CellTemplate Context="contxt">
                                        <MudTooltip Text="Edit">
                                            <MudIconButton Class="action-column" Icon="@Icons.Material.Filled.Edit" OnClick="@(async ()=>{await ProjectService.SetCurrentProjectAsync(contxt.Item);
                                                                                        NavManager.NavigateTo($"projects/edit?projectid={contxt.Item.ProjectId}");
                                                                                        })" />
                                        </MudTooltip>
                                        <MudTooltip Text="Delete">
                                            <MudIconButton Class="action-column" Icon="@Icons.Material.Filled.Delete" OnClick="@(async ()=>{await ProjectService.SetCurrentProjectAsync(contxt.Item);
                                                                                        NavManager.NavigateTo($"projects/delete?projectid={contxt.Item.ProjectId}");
                                                                                        })" />
                                        </MudTooltip>
                                    </CellTemplate>
                                </MudBlazor.TemplateColumn>
                            </Columns>
                        </MudDataGrid>
                    </AuthorizeView>
                }
                else
                {
                    <AuthorizeView Roles="Project Manager, Project Member">
                        <MudDataGrid T="Project" Items="ProjectUserProjects" Bordered="false" Striped="true" Dense="true" RowClick="GoToProject" Hover="true" Style="height:89%;" Groupable="false" Class="full-height-datagrid">
                            <Columns>
                                <MudBlazor.PropertyColumn Property="project => project.ProjectName" Title="Project" CellClass="row" HeaderStyle="height:60px;width:40%;font-weight:bold;" />
                                <MudBlazor.PropertyColumn Property="project => project.Startdate.ToShortDateString()" Title="Start Date" CellClass="row" HeaderStyle="height:60px;width:20%;font-weight:bold;" />
                                <MudBlazor.PropertyColumn Property="project => project.Enddate.ToShortDateString()" Title="End Date" CellClass="row" HeaderStyle="height:60px;width:20%;font-weight:bold;" />
                                <MudBlazor.TemplateColumn Title="Status" HeaderStyle="height:60px;width:40%;font-weight:bold;">
                                    <CellTemplate Context="contxt">
                                        @{
                                            if (contxt.Item.Startdate > DateTime.Now)
                                            {
                                                <MudChip T="string" Color="Color.Dark">Not Started</MudChip>
                                            }
                                            else if (contxt.Item.Startdate <= DateTime.Now)
                                            {
                                                <MudChip T="string" Color="Color.Warning">In Progress</MudChip>
                                            }
                                            else if (contxt.Item.Enddate <= DateTime.Now)
                                            {
                                                <MudChip T="string" Color="Color.Success">Ended</MudChip>
                                            }
                                        }
                                    </CellTemplate>
                                </MudBlazor.TemplateColumn>
                                <MudBlazor.TemplateColumn CellClass="d-flex justify-center " HeaderStyle="height:60px;width:5%;font-weight:bold;">
                                    <CellTemplate Context="contxt">
                                        <MudTooltip Text="Edit">
                                            <MudIconButton Class="action-column" Icon="@Icons.Material.Filled.Edit" OnClick="@(async ()=>{await ProjectService.SetCurrentProjectAsync(contxt.Item);
                                                                                    NavManager.NavigateTo($"projects/edit?projectid={contxt.Item.ProjectId}");
                                                                                    })" />
                                        </MudTooltip>
                                        <MudTooltip Text="Delete">
                                            <MudIconButton Class="action-column" Icon="@Icons.Material.Filled.Delete" OnClick="@(async ()=>{await ProjectService.SetCurrentProjectAsync(contxt.Item);
                                                                                    NavManager.NavigateTo($"projects/delete?projectid={contxt.Item.ProjectId}");
                                                                                    })" />
                                        </MudTooltip>
                                    </CellTemplate>
                                </MudBlazor.TemplateColumn>
                            </Columns>
                        </MudDataGrid>
                    </AuthorizeView>
                }
            }
            else
            {
                <p>Loading...</p>
            }
        </CascadingAuthenticationState>






<style>
    /* Hide the action column by default */
    .mud-table-row .row{
        cursor:pointer;
    }
    .mud-table-row .action-column {
        visibility: hidden;
        opacity: 0;
        transition: opacity 0.3s ease;
        margin:0 0 0 auto;
    }

    /* Show the action column on row hover */
    .mud-table-row:hover{
        background-color:transparent;
        color: pink;
    }
    .mud-table-row:hover .action-column {
        visibility: visible;
        opacity: 1;
    }

    .full-height-datagrid {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

        .full-height-datagrid .mud-datagrid-table {
            flex-grow: 1;
            overflow-y: auto;
        }

        .full-height-datagrid .mud-datagrid-pager {
            flex-shrink: 0; /* Prevent the pager from shrinking */
        }
</style>


@code {

    // protected override void OnInitialized()
    // {
    //     db = DbFactory.CreateDbContext();
    // }
    public class CustomProject : Project
    {
        public int projID { get; set; }
        public bool showDetails { get; set; } = false;
    }
    List<Project> CustomProjects { get; set; } = new();
    private ApplicationUser currentUser { get; set; } = new();
    private List<Project> Projects { get; set; } = new();
    private List<Project> ProjectUserProjects { get; set; } = new();
    private List<ProjectUser> CurrentProjectUserInstances { get; set; } = new();
    private ProjectUser projectUser { get; set; } = new();

    private AuthenticationState? authenticationState;

    bool userIsAdmin = true;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ProjectService.PropertyChanged += HandlePropertyChanged;
        ProjectService.RegisterListener(StateHasChanged);
        Projects = await ProjectService.GetProjectsAsync();
        foreach(var proj in ProjectService.Projects)
        {
            var p = new CustomProject()
            {
                projID = proj.ProjectId
            };

            CustomProjects.Add(p);
        }
        currentUser = await userService.GetCurrentUserAsync();
        if (currentUser.Roles.Contains("Administrators"))
        {
            userIsAdmin = true;
        }
        else
        {
            userIsAdmin = false;
        }
        CurrentProjectUserInstances = await puService.GetAllAsync(i=>i.UserId == currentUser.Id);
        foreach(var proj in Projects)
        {
            foreach(var userProj in CurrentProjectUserInstances)
            {
                if(proj.ProjectId == userProj.ProjectId)
                {
                    ProjectUserProjects.Add(proj);
                }
            }
        }

    }

    private void HandlePropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(ProjectService.CurrentProject))
        {
            InvokeAsync(StateHasChanged);
        }
    }
    async Task GoToProject(DataGridRowClickEventArgs<Project> args)
    {
        var proj = args.Item;
        await ProjectService.SetCurrentProjectAsync(proj);
        NavManager.NavigateTo($"projects/details?projectid={ProjectService.CurrentProject.ProjectId}");
    }
    private async Task RowMouseEnterEvent(TableRowHoverEventArgs<Project> eventArgs)
    {
        var proj = eventArgs.Item;
        await ProjectService.SetCurrentProjectAsync(proj);
        NavManager.NavigateTo($"projects/details?projectid={ProjectService.CurrentProject.ProjectId}");
    }
    public void Dispose()
    {
        ProjectService.PropertyChanged -= HandlePropertyChanged;
        ProjectService.UnregisterListener(StateHasChanged);
    }
}
