@page "/projects/delete"
@using Microsoft.EntityFrameworkCore
@using BuildMasterPro.Data
@inject IDbContextFactory<BuildMasterPro.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
@* <div>
    <h2>Project</h2>
    <hr />
    @if (project is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ProjectName</dt>
            <dd class="col-sm-10">@project.ProjectName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@project.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Startdate</dt>
            <dd class="col-sm-10">@project.Startdate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Enddate</dt>
            <dd class="col-sm-10">@project.Enddate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@project.Status</dd>
        </dl>
        <EditForm method="post" Model="project" OnValidSubmit="DeleteProject" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(project is null)">Delete</button> |
            <a href="/projects">Back to List</a>
        </EditForm>
    }
</div> *@

@code {
    // private Project? project;

    // private List<ProjectTask> Tasks { get; set; } = new();

    // [SupplyParameterFromQuery]
    // private int ProjectId { get; set; }

    // protected override async Task OnInitializedAsync()
    // {
    //     using var context = DbFactory.CreateDbContext();
    //     project = await context.Project.FirstOrDefaultAsync(m => m.ProjectId == ProjectId);
    //     Tasks = await context.ProjectTask.Where(i => i.ProjectId == project.ProjectId).ToListAsync();


    //     if (project is null)
    //     {
    //         NavigationManager.NavigateTo("notfound");
    //     }
    // }

    // private async Task DeleteProject()
    // {
    //     using var context = DbFactory.CreateDbContext();
    //     if(Tasks != null)
    //     {
    //         foreach (ProjectTask task in Tasks)
    //         {
    //             context.ProjectTask.Remove(task!);
    //         }
    //     }
        
    //     context.Project.Remove(project!);
    //     await context.SaveChangesAsync();
    //     NavigationManager.NavigateTo("/projects");
    // }
}
