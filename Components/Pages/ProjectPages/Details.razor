@page "/projects/details"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BuildMasterPro.Data
@inject IDbContextFactory<BuildMasterPro.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject ApplicationDbContext context
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject BuildMasterPro.Services.ProjectService ProjectService
@inject BuildMasterPro.Services.ProjectTaskService TaskService

<PageTitle>Details</PageTitle>

<h1>Under Development</h1>

@code {
    private Project? project = new();

    [SupplyParameterFromQuery]
    private int ProjectId { get; set; }

    private List<ProjectTask> Tasks { get; set; } = new();

    private string displayTaskCreate = "none";
    private string TCButtonText = "Add Task";

    protected override async Task OnInitializedAsync()
    {
        //using var context = DbFactory.CreateDbContext();
        // project = await context.Project.FirstOrDefaultAsync(m => m.ProjectId == ProjectId);
        // Tasks = await context.ProjectTask.Where(i => i.ProjectId == project.ProjectId).ToListAsync();
        project = ProjectService.CurrentProject;
        Tasks = TaskService.CurrentProjectTasks;

        if (project is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     project = await LocalStorage.GetItemAsync<Project>("CurrentProjectKey");
    //     Tasks = await LocalStorage.GetItemAsync<List<ProjectTask>>("ProjectTasksKey");
        
    // }

    private void DisplayTaskCreate()
    {
        displayTaskCreate = displayTaskCreate == "none" ? "block" : "none";
        TCButtonText = TCButtonText == "Add Task" ? "Close" : "Add Task";
    }
}
