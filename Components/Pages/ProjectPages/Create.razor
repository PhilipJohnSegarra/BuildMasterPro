@page "/projects/create"
@using Microsoft.EntityFrameworkCore
@using BuildMasterPro.Data
@rendermode InteractiveServer
@inject IDbContextFactory<BuildMasterPro.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject BuildMasterPro.Services.ProjectService ProjectService
@inject BuildMasterPro.Services.ProjectUserService ProjUserService
@inject BuildMasterPro.Services.UserService UserService

<MudPopoverProvider />
<MudDialogProvider />
<MudThemeProvider />

<PageTitle>Create</PageTitle>
<hr />
<div class="row">
    <div class="col-md-4">
        <MudGrid>
            <MudItem lg="12">
                <MudPaper Elevation="1" Class="mud-width-full" Style="padding:6rem;">
                    <MudGrid>
                        <MudItem lg="12">
                            <MudPaper Elevation="0" Class="mud-width-full d-flex align-center justify-center">
                                <h1>Create Project</h1>
                            </MudPaper>
                        </MudItem>
                        <MudItem lg="12">
                            <MudPaper Elevation="0" Class="mud-width-full d-flex flex-column align-center justify-center">
                                <EditForm method="post" Model="_projectViewModel" OnValidSubmit="AddProject" FormName="create" Enhance style="width:100%;max-width:800px;">
                                    <MudGrid Class="mud-width-full">
                                        <MudItem lg="12">
                                            <MudPaper Elevation="0" Class="d-flex flex-column align-center justify-center mud-width-full">
                                                <DataAnnotationsValidator />
                                                <ValidationSummary class="text-danger" role="alert" />
                                            </MudPaper>
                                        </MudItem>
                                        <MudItem lg="12">
                                            <MudPaper Elevation="0" Class="d-flex flex-column align-start justify-center mud-width-full">
                                                <label>Project Name:</label>
                                                <MudTextField ShrinkLabel @bind-Value="_projectViewModel.Project.ProjectName" Variant="Variant.Outlined" Class="mud-width-full"></MudTextField>
                                                <ValidationMessage For="() => Project.ProjectName" class="text-danger" />
                                            </MudPaper>
                                        </MudItem>
                                        <MudItem lg="12">
                                            <MudPaper Elevation="0" Class="d-flex flex-column align-start justify-center mud-width-full">
                                                <label>Description:</label>
                                                <MudTextField ShrinkLabel @bind-Value="_projectViewModel.Project.Description" Variant="Variant.Outlined" Class="mud-width-full" Lines="3"></MudTextField>
                                            </MudPaper>
                                        </MudItem>
                                        <MudItem lg="4" md="4">
                                            <MudPaper Elevation="0" Class="d-flex flex-column align-start justify-center mud-width-full">
                                                <label>Start Date:</label>
                                                <MudDatePicker Date="_projectViewModel.Project.Startdate" DateChanged="OnStartDateChanged" Label="dd/mm/yyyy" Editable="true" @bind-Value="_projectViewModel.Project.Startdate" Mask="@(new DateMask("dd.MM.yyyy"))" DateFormat="dd.MM.yyyy" Placeholder="@DateTime.Now.Date.ToShortDateString().ToString()" Variant="Variant.Outlined" />
                                            </MudPaper>
                                        </MudItem>
                                        <MudItem lg="4" md="4">
                                            <MudPaper Elevation="0" Class="d-flex flex-column align-start justify-center mud-width-full">
                                                <label>End Date:</label>
                                                <MudDatePicker Label="dd/mm/yyyy" Editable="true" @bind-Value="_projectViewModel.Project.Enddate" Mask="@(new DateMask("dd.MM.yyyy"))" DateChanged="OnEndDateChanged" DateFormat="dd.MM.yyyy" Placeholder="@DateTime.Now.Date.ToShortDateString().ToString()" Variant="Variant.Outlined" />
                                            </MudPaper>
                                        </MudItem>
                                        <MudItem lg="4" md="4" Style="width:100%;margin:0 0 0 auto;">
                                            <MudPaper Elevation="0" Class="d-flex flex-column align-start justify-center mud-width-full" Style="width:100%;margin:0 0 0 auto;">
                                                <label>Status:</label>
                                                <MudSelect @bind-Value="_projectViewModel.Project.Status"
                                                           Variant="Variant.Outlined" Label=" "
                                                           style="width:200%;">
                                                    @foreach (var state in StatusArray)
                                                    {
                                                        <MudSelectItem Value="state">@state</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudPaper>
                                        </MudItem>
                                        <MudItem lg="12" md="4" Style="width:100%;margin:0 0 0 auto;">
                                            <MudSelect T="string" MultiSelection="true"
                                                       Label="Assign Members(Optional)"
                                                       SelectedValues="@_projectViewModel.SelectedUserIds"
                                                       SelectedValuesChanged="@(e => _projectViewModel.SelectedUserIds = e.ToList())">
                                                @foreach (var user in Users)
                                                {
                                                    <MudSelectItem T="string" Value="@user.Id">@user.Email</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem lg="12" md="12">
                                            <MudPaper Elevation="0" Class="d-flex flex-column align-center justify-center mud-width-full">
                                                <button type="submit" class="PrimaryBG btn btn-primary" style="padding:1rem;width:100%;color:white;border-radius:5px;">Create</button>
                                            </MudPaper>
                                        </MudItem>
                                    </MudGrid>
                                    
                                    @* <div class="mb-3">
                                        <label for="projectname" class="form-label">ProjectName:</label>
                                        <InputText id="projectname" @bind-Value="Project.ProjectName" class="form-control" aria-required="true" />
                                        <ValidationMessage For="() => Project.ProjectName" class="text-danger" />
                                    </div> *@
                                    @* <div class="mb-3">
                                        <label for="description" class="form-label">Description:</label>
                                        <InputTextArea id="description" @bind-Value="Project.Description" class="form-control" />
                                        <ValidationMessage For="() => Project.Description" class="text-danger" />
                                    </div> *@
                                    @* <div class="mb-3">
                                        <label for="startdate" class="form-label">Startdate:</label>
                                        <InputDate id="startdate" @bind-Value="Project.Startdate" class="form-control" aria-required="true" />
                                        <ValidationMessage For="() => Project.Startdate" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label for="enddate" class="form-label">Enddate:</label>
                                        <InputDate id="enddate" @bind-Value="Project.Enddate" class="form-control" />
                                        <ValidationMessage For="() => Project.Enddate" class="text-danger" />
                                    </div> *@
                                    @* <div class="mb-3">
                                        <label for="status" class="form-label">Status:</label>
                                        <InputText id="status" @bind-Value="Project.Status" class="form-control" />
                                        <ValidationMessage For="() => Project.Status" class="text-danger" />
                                    </div> *@
                                    
                                </EditForm>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                    
                </MudPaper>
            </MudItem>
        </MudGrid>
        
    </div>
</div>

@* <div>
    <a href="">Back to List</a>
</div> *@

<h1>@exception</h1>

@code {
    [SupplyParameterFromForm]
    private Project Project { get; set; } = new();

    private ProjectViewModel _projectViewModel { get; set; } = new();

    string exception = "";
    string statusValue = "";
    string[] StatusArray = new string[] {"Not Started", "Ongoing"};

    List<ApplicationUser> Users = new();
    List<string> SelectedUsersID = new();
    List<ProjectUser> selectedUsers = new();

    protected override async Task OnInitializedAsync()
    {
        Users = await UserService.GetAll();
    }

    //PROPS AND METHODS FOR SELECT USER 
    private string value { get; set; }
    private IEnumerable<string> options { get; set; } = new HashSet<string>() { "Lion" };

    private string[] felines =
    {
        "Jaguar", "Leopard", "Lion", "Lynx", "Panther", "Puma", "Tiger"
    };

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} users{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddProject()
    {
        try
        {
            var savedProject = await ProjectService.CreateProjectAsync(_projectViewModel.Project!);
            foreach(var id in _projectViewModel.SelectedUserIds!)
            {
                var projectUser = new ProjectUser
                {
                    ProjectId = savedProject.ProjectId,
                    UserId = id
                };

                selectedUsers.Add(projectUser);
            }
            await ProjUserService.AddMany(selectedUsers);
            // 
        }
        catch (Exception e)
        {
            exception = e.Message;
        }

        await InvokeAsync(() => NavigationManager.NavigateTo("/", forceLoad: true));
    }

    public class ProjectViewModel
    {
        public Project? Project { get; set; } = new();
        public List<string>? SelectedUserIds { get; set; } = new(); // Store selected user IDs
    }
    private void OnStartDateChanged(DateTime? newDate)
    {
        _projectViewModel.Project.Startdate = (DateTime)newDate!;
    }
    private void OnEndDateChanged(DateTime? newDate)
    {
        _projectViewModel.Project.Enddate = (DateTime)newDate!;
    }
}
