@page "/newMessage"
@rendermode InteractiveServer
@using BuildMasterPro.Data
@using Microsoft.EntityFrameworkCore
@using BuildMasterPro.Services
@using MongoDB.Driver
@using MongoDB.Bson
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext db
@inject MongoService MongoService
@inject UserManager<ApplicationUser> UserManager
@inject MessageService MessageService
@inject UserService userService
@inject BlobStorageService blobService
@inject EmailService emailService
@inject NotificationService notifService
@inject IJSRuntime JSRuntime


<MudPopoverProvider />
<MudDialogProvider />
<MudThemeProvider />
<!--Sender-->
@* <h3>Choose Sender (Development Purposes)</h3>
<MudSelect @bind-Value="@Receiver"
           Clearable="true"
           T="ApplicationUser"
           >
    @foreach (var user in Users!)
    {
        <MudSelectItem Value="user" OnClick="@(async()=>{
                                        UserMessages = await MessageService.GetAllMessagesForUsers(CurrentUser, Receiver);
                                        await ScrollMessages();})">@user.UserName</MudSelectItem>
    }
</MudSelect> *@




<!--Receiver-->
@if(Users == null)
{
    <h2>Please Wait</h2>
}
else
{
    <MudPaper Class="pa-0 TransparentBG" Elevation="0" Style="height:100%;width:100%;">
        <MudGrid Style="height:100%;width:100%;" Spacing="1">
            <MudItem lg="3" Style="height:100%;width:100%;">
                <MudPaper Class="MainBG d-flex flex-column justify-center align-center" Style="height:100%;width:100%;">
                    <div style="display:grid;grid-template-rows:50px 1fr;height:100%;width:100%;">
                        <MudPaper Elevation="1" Class="d-flex flex-row justify-space-between align-center TransparentBG ps-3 pe-3" Style="border-radius:0;height:100%;width:100%;z-index:11;">
                            @if (writeNewMessage == false)
                            {
                                <MudText class="PrimaryText" Style="font-weight:bold;"> Messages</MudText>
                            }
                            else
                            {
                                <div class="MainBG" style="width:100%;height:auto;position:relative;overflow:visible;margin:0 0 0 0;padding:0 0 0 0;">
                                    <input @bind="TextValue" @bind:event="oninput" style="width:100%;height:auto;border: 1px solid gray;padding:.5rem .5rem .5rem 1.5rem;border-radius:40px;" />
                                    @if (TextValue != "")
                                    {
                                        <MudPaper Elevation="2" Style="position:absolute;left:0;top:100%;z-index:1000;width:100%;">
                                            <MudList T="ApplicationUser" Class="MainBG">
                                                @foreach (var user in Users.Where(x => x.FirstName.ToLower().Contains(TextValue.ToLower()) || x.LastName.ToLower().Contains(TextValue.ToLower())).ToList())
                                                {
                                                    if (user != null)
                                                    {
                                                        <MudListItem OnClick="@(async()=>{
                                            Receiver = user;
                                            UserMessages = await MessageService.GetAllMessagesForUsers(CurrentUser, Receiver);
                                            TextValue = "";
})">
                                                            <h5>
                                                                @(string.IsNullOrEmpty(user.FirstName)? user.Email : string.Concat(user.FirstName, " ", user.LastName))
                                                            </h5>
                                                        </MudListItem>
                                                    }
                                                    else
                                                    {
                                                        <MudListItem>

                                                        </MudListItem>
                                                    }
                                                }
                                            </MudList>
                                        </MudPaper>

                                    }
                                </div>
                            }
                            @if(writeNewMessage == true)
                            {
                                <MudIconButton OnClick="()=>{writeNewMessage = !writeNewMessage;}" Class="PrimaryText" Icon="@Icons.Material.Outlined.Close" Style="padding:3px;border-radius:0;" />
                            }
                            else
                            {
                                <MudIconButton OnClick="()=>{writeNewMessage = !writeNewMessage;}" Class="PrimaryText" Icon="@Icons.Material.Outlined.Add" Style="padding:3px;border-radius:0;" />
                            }
                            
                        </MudPaper>
                        <MudPaper Class="d-flex flex-column justify-start align-start TransparentBG pt-3 ps-0 pe-0 pb-3" Style="border-radius:0;height:100%;width:100%;z-index:8;overflow-y:auto;">
                            <MudList T="Message" Style="width:100%;">
                                @foreach (var message in Messages)
                                {
                                    <MudListItem Text="" Class="MainBG" SecondaryText="" OnClick="@(async()=> {
                            await UserMessage(message);
                            UserMessages = await MessageService.GetAllMessagesForUsers(CurrentUser, Receiver);
                            //await ScrollMessages();
                        })">
                                        @{
                                            var timeSpan = DateTime.Now.ToUniversalTime() - message.Timestamp.Value.ToUniversalTime();
                                            string timeDisplay = "";
                                            var secondSpan = (int)timeSpan.TotalSeconds;
                                            var minSpan = (int)timeSpan.TotalMinutes;
                                            var hourSpan = (int)timeSpan.TotalHours;
                                            var daySpan = (int)timeSpan.TotalDays;
                                            if (minSpan < 1) timeDisplay = secondSpan.ToString() + "s";
                                            if (minSpan >= 1) timeDisplay = minSpan.ToString() + "min";
                                            if (minSpan > 60) timeDisplay = hourSpan.ToString() + "h";
                                            if (hourSpan > 24) timeDisplay = daySpan.ToString() + "d";

                                        }
                                        <MudGrid>
                                            <MudItem lg="2" Class="d-flex flex-column justify-center align-center">
                                                <MudAvatar Size="Size.Medium">
                                                    @if(message.ReceiverID == CurrentUser.Id)
                                                    {
                                                        <MudImage Src="@message.SenderPicture"/>
                                                    }
                                                    else
                                                    {
                                                        <MudImage Src="@message.ReceiverPicture" />
                                                    }
                                                </MudAvatar>
                                            </MudItem>
                                            <MudItem lg="10">
                                                <MudPaper Elevation="0" Class="d-flex flex-row justify-space-between align-center TransparentBG">
                                                    <h5>@(message.SenderID == CurrentUser.Id ? message.ReceiverName : message.SenderName)</h5>
                                                    <p style="font-size:12px;">@timeDisplay</p>
                                                </MudPaper>
                                                <p style="font-size:11px;">@message.MessageText</p>
                                            </MudItem>
                                        </MudGrid>
                                        
                                        
                                    </MudListItem>
                                }
                            </MudList>

                        </MudPaper>
                    </div>
                </MudPaper>
            </MudItem>
            <MudItem lg="9" Style="height:100%;width:100%;">
                <MudPaper Class="MainBG" Style="height:100%;width:100%;">
                    <div style="display:grid;grid-template-rows:50px 1fr auto 70px;height:100%;width:100%;">
                        <MudPaper Elevation="1" Class="d-flex flex-row justify-space-between align-center TransparentBG ps-3 pe-3" Style="border-radius:0;height:100%;width:100%;z-index:8;">
                            @if(Receiver != null)
                            {
                                <MudAvatar>
                                    <MudImage Src="@Receiver.ProfilePictureUrl" />
                                </MudAvatar>
                                <MudText Class="SecondaryText" Style="margin:0 auto 0 1rem;font-weight:bold;">
                                    @(string.IsNullOrEmpty(Receiver.FirstName) ? Receiver.Email : string.Concat(Receiver.FirstName, " ", Receiver.LastName))
                                </MudText>
                            }
                            <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Style="padding:3px;border-radius:0;" />
                        </MudPaper>
                        <MudPaper Class="d-flex flex-column justify-start align-start TransparentBG pt-3 ps-3 pe-3 pb-3" Style="border-radius:0;height:100%;width:100%;z-index:8;overflow-y:auto;">
                            <div id="messages" style="overflow-y:auto;padding:1rem;height:100%;width:100%;">
                                @if (UserMessages != null)
                                {
                                    <MudStack Style="max-height:100%;">
                                        @foreach (var message in UserMessages)
                                        {
                                            <MudStack Class="d-flex flex-row" Row Justify="Justify.FlexStart">
                                                <MudText Class="@(message.SenderID == this.CurrentUser.Id? "senderStyle" : "")" Style="font-size:10px;margin-bottom:-10px;">@message.Timestamp.Value.ToLongDateString()</MudText>
                                            </MudStack>
                                            <MudPaper Style="width:max-content;border-radius:10px;margin-top:5px;margin-bottom:10px;padding:1rem;max-width:100%;"
                                                      Class="@(message.SenderID == this.CurrentUser.Id? "PrimaryBG senderStyle" : "SecondaryBG")">
                                                <p class="MainText">@message.MessageText</p>
                                                @if (message.Files != null && message.Files.Count > 0)
                                                {
                                                    <MudPaper Class="d-flex flex-column justify-start align-start TransparentBG mt-3" Elevation="0" Style="width:max-content;max-width:100%;">
                                                        @foreach (var file in message.Files)
                                                        {
                                                            <a style="padding:5px 0 5px 0;color:white;display:flex;flex-direction:row;justify-content:center;align-items:center;max-width:90%;overflow:hidden;" href="@file">@file</a>
                                                        }

                                                    </MudPaper>
                                                }

                                                @if (message.Images != null && message.Images.Count > 0)
                                                {
                                                    <MudGrid Justify="Justify.FlexStart" Style="max-width:70%;margin:1px 0 0 0;">
                                                        @foreach (var image in message.Images)
                                                        {
                                                            <MudItem lg="4">
                                                                <MudImage Src="@image" Style="max-width:100%;" />
                                                            </MudItem>
                                                        }
                                                    </MudGrid>
                                                }
                                                else
                                                {

                                                }
                                            </MudPaper>
                                            
                                            
                                        }
                                    </MudStack>
                                }
                                else
                                {
                                    <p>Please Wait</p>
                                }
                            </div>

                        </MudPaper>
                        <div>
                            @if (this.files != null || this.images != null)
                            {
                                <MudGrid Style="width:100%;padding:1rem;">
                                    @if (this.files != null && this.files.Count > 0)
                                    {
                                        <MudItem lg="6">
                                            @foreach (var file in this.files)
                                            {
                                                <MudText>
                                                    <span><MudIcon Size="Size.Small" Icon="@Icons.Material.Outlined.AttachFile" /></span>
                                                    @file.Name<span style="margin:0 0 0 1rem;"><MudIconButton Icon="@Icons.Material.Outlined.Cancel" Size="Size.Small" OnClick="()=>{this.files.Remove(file);}" /></span>
                                                </MudText>
                                            }
                                        </MudItem>
                                    }
                                    @if (this.images != null && this.images.Count > 0)
                                    {
                                        <MudItem lg="6">
                                            <MudGrid Style="width:100%;" Spacing="1">
                                                @foreach (var image in this.ImageDisplayList)
                                                {
                                                    <MudItem lg="2">
                                                        <MudPaper Elevation="0" Class="d-flex flex-column justify-start align-center pa-0 TransparentBG">
                                                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Cancel" Class="ms-auto"
                                                                           OnClick="()=>{this.images.Remove(image.Image);this.ImageDisplayList.Remove(image);}" />
                                                            <MudImage Src="@image.Display" Style="max-width:100%;" />
                                                        </MudPaper>

                                                    </MudItem>

                                                }
                                            </MudGrid>

                                        </MudItem>
                                    }

                                </MudGrid>
                            }
                        </div>
                        <MudPaper Elevation="1" Class="d-flex flex-row justify-space-between align-center TransparentBG ps-3 pe-3" Style="border-radius:0;height:100%;width:100%;z-index:8;">
                            @if(Receiver != null && Receiver.IsDeleted == true)
                            {
                                <MudText Color="Color.Error">This user has been removed. Messaging is no longer allowed. Reach out to your supervisor for guidance.</MudText>
                            }
                            else
                            {
                                <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles">
                                    <ActivatorContent>
                                        <MudIconButton Class="SecondaryText"
                                                       Icon="@Icons.Material.Filled.AttachFile"
                                                       Color="Color.Primary">
                                        </MudIconButton>
                                    </ActivatorContent>
                                </MudFileUpload>
                                <MudTextField T="string" @bind-Value="MessageText" Style="flex-grow: 1;max-height:45px;border-radius:40px;" Variant="Variant.Outlined" OnKeyDown="HandleKeyDown" OnKeyUp="HandleKeyDown" />
                                <MudIconButton Icon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="SendMessage" Style="padding:3px;border-radius:0;" />
                            }
                            
                        </MudPaper>
                    </div>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudPaper>
    
    
}

<style>
    .senderStyle{
        margin-left:auto;
    }
</style>


@code {
    //For left side
    [Parameter]
    public string? ReceiverId { get; set; }
    private AuthenticationState? authState;
    private ApplicationUser? CurrentUser { get; set; } = new();
    private ApplicationUser? Receiver { get; set; } = null;
    private ApplicationUser? Sender { get; set; } = new();
    private List<ApplicationUser>? Users { get; set; } = new();
    private string MessageText { get; set; } = "";
    private List<Message>? Messages { get; set; } = new();
    private bool sendbuttonDisabled = true;
    public string TextValue { get; set; } = "";
    public List<ApplicationUser> filteredUsers = new();

    //For Right Side
    private List<Message>? UserMessages { get; set; } = new();
    bool writeNewMessage { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Users = await userService.GetAll();
        CurrentUser = await userService.GetCurrentUserAsync();
        Sender = CurrentUser;
        Messages = await MessageService.GetLatestMessagesForUser(CurrentUser);
        MessageService.SubscribeToMessages(NewMessageReceived);
        if(ReceiverId != null)
        {
            Receiver = Users.FirstOrDefault(i=>i.Id == ReceiverId);
        }

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollMessages();
    }

    async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(MessageText) || files.Count > 0 || images.Count > 0)
        {
            var message = await ComposeMessage();
            if (message != null && Receiver != null)
            {
                await MessageService.SendMessageAsync(message);
                await MessageService.GetLatestMessagesForUser(CurrentUser);
                Messages = await MessageService.GetLatestMessagesForUser(CurrentUser);
                UserMessages = await MessageService.GetAllMessagesForUsers(CurrentUser, this.Receiver);
                await emailService.SendEmailNotif(Receiver.Email, "New Message", $"{string.Concat(Sender.FirstName, " ", Sender.LastName)} sent you a message: {MessageText}");
                await ScrollMessages();
                var newNotif = new Notification
                {
                    UserId = Receiver.Id,
                    Title = $"New Message from {string.Concat(Sender.FirstName, " ", Sender.LastName)}",
                    Message = "Click to view messages",
                        LinkUrl = $"/newMessage?ReceiverId={Receiver.Id}"
                };
                await notifService.AddNotification(newNotif);
            }
            else
            {
                return;
            }
        }
        else
        {
            return;
        }
        files = new List<IBrowserFile>();
        images = new List<IBrowserFile>();
        MessageText = "";
    }

    async Task<Message> ComposeMessage()
    {
        var newMessage = new Message();
        newMessage.SenderID = Sender!.Id;
        newMessage.SenderPicture = Sender.ProfilePictureUrl;
        newMessage.SenderName = Sender.FirstName == "" && Sender.LastName == "" ? Sender.Email : Sender.LastName + " " + Sender.FirstName;
        newMessage.ReceiverID = Receiver!.Id;
        newMessage.ReceiverPicture = Receiver.ProfilePictureUrl;
        newMessage.ReceiverName = Receiver.FirstName == "" && Receiver.LastName == "" ? Receiver.Email : Receiver.LastName + " " + Receiver.FirstName;
        newMessage.MessageText = this.MessageText;
        if (images != null)
        {
            foreach (var image in images)
            {
                using var stream = image.OpenReadStream(maxAllowedSize: 5000000);
                var newImage = await blobService.UploadFileAsync(stream, image.Name, image.ContentType);
                newMessage.Images.Add(newImage);
            }
        }
        if (files != null)
        {
            foreach (var file in files)
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 5000000);
                var newfile = await blobService.UploadFileAsync(stream, file.Name, file.ContentType);
                newMessage.Files.Add(newfile);
            }
        }
        return newMessage;

    }

    async Task UserMessage(Message message)
    {
        if (message.ReceiverID == CurrentUser.Id)
        {
            Receiver = await db.Users.FindAsync(message.SenderID);
        }
        else
        {
            Receiver = await db.Users.FindAsync(message.ReceiverID);
        }
    }

    private async Task ScrollMessages()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "messages");
    }

    private void filterUser()
    {
        if (!string.IsNullOrEmpty(TextValue)) filteredUsers = Users.Where(x => x.Email.ToLower().Contains(TextValue.ToLower())).ToList();
        else filteredUsers = null;

    }

    private void NewMessageReceived(Message newMessage)
    {
        if ((newMessage.SenderID == Sender.Id && newMessage.ReceiverID == Receiver.Id) ||
            (newMessage.SenderID == Receiver.Id && newMessage.ReceiverID == Sender.Id))
        {
            UserMessages.Add(newMessage);
            InvokeAsync(StateHasChanged);
        }
    }

    IList<IBrowserFile> files = new List<IBrowserFile>();
    IList<IBrowserFile> images = new List<IBrowserFile>();
    List<_imageViewModel> ImageDisplayList = new();
    List<string> imageUrls = new();
    private static readonly HashSet<string> ImageExtensions = new() { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp", ".tiff", ".svg" };
    private async Task UploadFiles(IReadOnlyList<IBrowserFile> uploadedFiles)
    {
        foreach (var file in uploadedFiles)
        {
            string extension = Path.GetExtension(file.Name).ToLower();
            if (file.ContentType.StartsWith("image/") || ImageExtensions.Contains(extension))
            {
                images.Add(file); // Add to images list if it's an image
                var url = await ImageDisplay(file);
                imageUrls.Add(url);
                var newDisplay = new _imageViewModel
                {
                    Image = file,
                    Display = await ImageDisplay(file)
                };
                ImageDisplayList.Add(newDisplay);
            }
            else
            {
                files.Add(file); // Add to files list otherwise
            }
        }
        //TODO upload the files to the server
    }
    private async Task<string> ImageDisplay(IBrowserFile file)
    {
        using var stream = file.OpenReadStream(maxAllowedSize: 5000000);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);

        // Convert image to Base64 string
        string base64String = Convert.ToBase64String(memoryStream.ToArray());
        return $"data:{file.ContentType};base64,{base64String}";
    }

    //FOR DRAWER
    private bool _openStart = false;
    private bool _openEnd = false;

    [CascadingParameter]
    public bool Rtl { get; set; }

    private void ToggleStartDrawer()
    {
        _openStart = !_openStart;
    }

    private void ToggleEndDrawer()
    {
        _openEnd = !_openEnd;
    }
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SendMessage();
            MessageText = "";
        }
    }
    private void UpdateUI(Channel updatedChannel)
    {
        if (updatedChannel.ChannelMessages != null)
        {

        }
    }
    public void Dispose()
    {

    }

    public class _imageViewModel
    {
        public IBrowserFile? Image { get; set; }
        public string? Display { get; set; }
    }
}
