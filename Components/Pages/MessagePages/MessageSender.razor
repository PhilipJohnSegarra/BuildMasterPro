@page "/newMessage"
@rendermode InteractiveServer
@using BuildMasterPro.Data
@using Microsoft.EntityFrameworkCore
@using BuildMasterPro.Services
@using MongoDB.Driver
@using MongoDB.Bson
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext db
@inject MongoService MongoService
@inject UserManager<ApplicationUser> UserManager
@inject MessageService MessageService
@inject IJSRuntime JSRuntime


<MudPopoverProvider />
<MudThemeProvider/>
<!--Sender-->
<h3>Choose Sender (Development Purposes)</h3>
<MudSelect @bind-Value="@Sender"
           Clearable="true">
    @foreach (var user in Users!)
    {
        <MudSelectItem Value="user">@user.UserName</MudSelectItem>
    }
</MudSelect>
<!--Receiver-->
@if(authState == null || Users == null)
{
    <h2>Please Wait</h2>
}
else
{
    <div style="display:grid;grid-template-columns:300px 1fr;height:100%;">
        <div>
            <MudList T="Message">
                @foreach (var message in Messages)
                {
                    <MudListItem Text="" SecondaryText="" OnClick="@(async()=> {
                            await UserMessage(message);
                            UserMessages = await MessageService.GetAllMessagesForUsers(CurrentUser, Receiver);
                            await ScrollMessages();
                        })">
                        <h5>@(message.SenderID == CurrentUser.Id ? message.ReceiverName : message.SenderName)</h5>
                        <p>@message.MessageText</p>
                        <p>Date: @message.Timestamp</p>
                    </MudListItem>
                }
            </MudList>
        </div>
        <div style="display:grid;grid-template-rows:50px 1fr auto;height:90%;">
            <MudSelect @bind-Value="@Receiver"
                       Clearable="true"
                       Class="MainBG">
                @foreach (var user in Users!)
                {
                    <MudSelectItem Value="user">@user.UserName</MudSelectItem>
                }
            </MudSelect>
            <div id="messages" style="flex: 1;margin:0 0 0 0;max-height:500px;overflow-y:auto;">
                <MudList T="Message">
                    @foreach (var message in UserMessages)
                    {
                        <MudListItem Text="" SecondaryText="">
                            <h5>@(message.SenderName)</h5>
                            <p>@message.MessageText</p>
                            <p>Date: @message.Timestamp</p>
                        </MudListItem>
                    }
                </MudList>
            </div>
            <div>
                <MudTextField T="string" Label="Outlined" Variant="Variant.Outlined" Lines="3" @bind-Text="@MessageText" Class="MainBG" />
                <MudButton OnClick="SendMessage" Disabled="@(this.Receiver != null && this.MessageText != ""? false : true)">Send</MudButton>
            </div>

        </div>
    </div>
    
}



@code {
    //For left side
    private AuthenticationState? authState;
    private ApplicationUser? CurrentUser { get; set; } = new();
    private ApplicationUser? Receiver { get; set; } = null;
    private ApplicationUser? Sender { get; set; } = new();
    private List<ApplicationUser>? Users { get; set; } = new();
    private string MessageText { get; set; } = "";
    private List<Message>? Messages { get; set; } = new();

    //For Right Side
    private List<Message>? UserMessages { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Users = await db.Users.ToListAsync();
        CurrentUser = await UserManager.GetUserAsync(authState.User);
        Sender = await UserManager.GetUserAsync(authState.User);
        Messages = MessageService.Messages;
        
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollMessages();
    }

    async Task SendMessage()
    {
        var message = await ComposeMessage();
        if(message != null && Receiver != null)
        {
            var messageCollection = MongoService.GetCollection<Message>("Messages");
            await messageCollection.InsertOneAsync(message);
            Receiver = null; MessageText = "";
            await MessageService.GetLatestMessagesForUser(CurrentUser);
            Messages = MessageService.Messages;
            UserMessages = await MessageService.GetAllMessagesForUsers(CurrentUser, Receiver);
            await ScrollMessages();
        }
        else
        {
            return;
        }

    }

    async Task<Message> ComposeMessage()
    {
        var newMessage = new Message();
        newMessage.SenderID = Sender!.Id;
        newMessage.SenderName = Sender.FirstName == "" && Sender.LastName == "" ? Sender.Email : Sender.LastName + " " + Sender.FirstName;
        newMessage.ReceiverID = Receiver!.Id;
        newMessage.ReceiverName = Receiver.FirstName == "" && Receiver.LastName == "" ? Receiver.Email : Receiver.LastName + " " + Receiver.FirstName;
        newMessage.MessageText = this.MessageText;
        return newMessage;

    }

    async Task UserMessage(Message message)
    {
        if (message.ReceiverID == CurrentUser.Id)
        {
            Receiver = db.Users.Find(message.SenderID);
        }
        else
        {
            Receiver = db.Users.Find(message.ReceiverID);
        }
    }
    private async Task ScrollMessages()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "messages");
    }
}
