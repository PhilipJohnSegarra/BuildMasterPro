@page "/newMessage"
@rendermode InteractiveServer
@using BuildMasterPro.Data
@using Microsoft.EntityFrameworkCore
@using BuildMasterPro.Services
@using MongoDB.Driver
@using MongoDB.Bson
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext db
@inject MongoService MongoService
@inject UserManager<ApplicationUser> UserManager
@inject MessageService MessageService
@inject IJSRuntime JSRuntime


<MudPopoverProvider />
<MudDialogProvider />
<MudThemeProvider />
<!--Sender-->
@* <h3>Choose Sender (Development Purposes)</h3>
<MudSelect @bind-Value="@Receiver"
           Clearable="true"
           T="ApplicationUser"
           >
    @foreach (var user in Users!)
    {
        <MudSelectItem Value="user" OnClick="@(async()=>{
                                        UserMessages = await MessageService.GetAllMessagesForUsers(CurrentUser, Receiver);
                                        await ScrollMessages();})">@user.UserName</MudSelectItem>
    }
</MudSelect> *@




<!--Receiver-->
@if(authState == null || Users == null)
{
    <h2>Please Wait</h2>
}
else
{
    <MudPaper Class="pa-0 TransparentBG" Elevation="0" Style="height:100%;width:100%;">
        <MudGrid Style="height:100%;width:100%;" Spacing="1">
            <MudItem lg="3" Style="height:100%;width:100%;">
                <MudPaper Class="MainBG d-flex flex-column justify-center align-center" Style="height:100%;width:100%;">
                    <div style="display:grid;grid-template-rows:50px 1fr;height:100%;width:100%;">
                        <MudPaper Elevation="1" Class="d-flex flex-row justify-space-between align-center TransparentBG ps-3 pe-3" Style="border-radius:0;height:100%;width:100%;z-index:11;">
                            @if (writeNewMessage == false)
                            {
                                <MudText>Messages</MudText>
                            }
                            else
                            {
                                <div class="MainBG" style="width:100%;height:auto;position:relative;overflow:visible;margin:0 0 0 0;padding:0 0 0 0;">
                                    <input @bind="TextValue" @bind:event="oninput" style="width:100%;height:auto;border: 1px solid gray;padding:.5rem .5rem .5rem 1.5rem;border-radius:40px;" />
                                    @if (TextValue != "")
                                    {
                                        <MudPaper Elevation="2" Style="position:absolute;left:0;top:100%;z-index:1000;width:100%;">
                                            <MudList T="ApplicationUser" Class="MainBG">
                                                @foreach (var user in Users.Where(x => x.Email.ToLower().Contains(TextValue.ToLower())).ToList())
                                                {
                                                    if (user != null)
                                                    {
                                                        <MudListItem OnClick="@(async()=>{
                                            Receiver = user;
                                            UserMessages = await MessageService.GetAllMessagesForUsers(CurrentUser, Receiver);
                                            TextValue = "";
})">
                                                            <h5>
                                                                @user.Email
                                                            </h5>
                                                        </MudListItem>
                                                    }
                                                    else
                                                    {
                                                        <MudListItem>

                                                        </MudListItem>
                                                    }
                                                }
                                            </MudList>
                                        </MudPaper>

                                    }
                                </div>
                            }
                            <MudIconButton OnClick="()=>{writeNewMessage = !writeNewMessage;}" Icon="@Icons.Material.Outlined.AddComment" Style="padding:3px;border-radius:0;" />
                        </MudPaper>
                        <MudPaper Class="d-flex flex-column justify-start align-start TransparentBG pt-3 ps-0 pe-0 pb-3" Style="border-radius:0;height:100%;width:100%;z-index:8;overflow-y:auto;">
                            <MudList T="Message" Style="width:100%;">
                                @foreach (var message in Messages)
                                {
                                    <MudListItem Text="" Class="MainBG" SecondaryText="" OnClick="@(async()=> {
                            await UserMessage(message);
                            UserMessages = await MessageService.GetAllMessagesForUsers(CurrentUser, Receiver);
                            //await ScrollMessages();
                        })">
                                        @{
                                            var timeSpan = DateTime.Now.ToUniversalTime() - message.Timestamp.Value.ToUniversalTime();
                                            var minSpan = (int)timeSpan.TotalMinutes;
                                            var hourSpan = (int)timeSpan.TotalHours;
                                            var daySpan = (int)timeSpan.TotalDays;
                                        }
                                        <MudGrid>
                                            <MudItem lg="2" Class="d-flex flex-column justify-center align-center">
                                                <MudAvatar Size="Size.Medium">
                                                    <MudIcon Icon="@Icons.Material.Filled.Person"/>
                                                </MudAvatar>
                                            </MudItem>
                                            <MudItem lg="10">
                                                <MudPaper Elevation="0" Class="d-flex flex-row justify-space-between align-center TransparentBG">
                                                    <h5>@(message.SenderID == CurrentUser.Id ? message.ReceiverName : message.SenderName)</h5>
                                                    <p style="font-size:12px;">@(hourSpan > 24 ? daySpan.ToString() + " day(s) ago" :" Today")</p>
                                                </MudPaper>
                                                <p style="font-size:11px;">@message.MessageText</p>
                                            </MudItem>
                                        </MudGrid>
                                        
                                        
                                    </MudListItem>
                                }
                            </MudList>

                        </MudPaper>
                    </div>
                </MudPaper>
            </MudItem>
            <MudItem lg="9" Style="height:100%;width:100%;">
                <MudPaper Class="MainBG" Style="height:100%;width:100%;">
                    <div style="display:grid;grid-template-rows:50px 1fr 70px;height:100%;width:100%;">
                        <MudPaper Elevation="1" Class="d-flex flex-row justify-space-between align-center TransparentBG ps-3 pe-3" Style="border-radius:0;height:100%;width:100%;z-index:8;">
                            <MudText>
                                @(Receiver != null ?
                                    (Receiver.FirstName == "" && Receiver.LastName == "" ? Receiver.UserName : Receiver.FirstName + " " + Receiver.LastName)
                                    : "")
                            </MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Menu" Style="padding:3px;border-radius:0;" />
                        </MudPaper>
                        <MudPaper Class="d-flex flex-column justify-start align-start TransparentBG pt-3 ps-3 pe-3 pb-3" Style="border-radius:0;height:100%;width:100%;z-index:8;overflow-y:auto;">
                            <div id="messages" style="overflow-y:auto;padding:1rem;height:100%;width:100%;">
                                @if (UserMessages != null)
                                {
                                    <MudStack Style="max-height:100%;">
                                        @foreach (var message in UserMessages)
                                        {
                                            <MudPaper Style="width:max-content;border-radius:10px;margin-top:5px;margin-bottom:5px;padding:1rem;"
                                                      Class="@(message.SenderID == this.CurrentUser.Id? "PrimaryBG senderStyle" : "SecondaryBG")">
                                                <p class="MainText">@message.MessageText</p>
                                            </MudPaper>
                                        }
                                    </MudStack>
                                }
                                else
                                {
                                    <p>Please Wait</p>
                                }
                            </div>

                        </MudPaper>
                        <MudPaper Elevation="1" Class="d-flex flex-row justify-space-between align-center TransparentBG ps-3 pe-3" Style="border-radius:0;height:100%;width:100%;z-index:8;">
                            <MudIconButton Icon="@Icons.Material.Filled.AttachFile" Style="padding:3px;border-radius:0;" />
                            <MudTextField T="string" @bind-Value="MessageText" Style="flex-grow: 1;max-height:45px;border-radius:40px;" Variant="Variant.Outlined" />
                            <MudIconButton Icon="@Icons.Material.Filled.Send" OnClick="SendMessage" Style="padding:3px;border-radius:0;" />
                        </MudPaper>
                    </div>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudPaper>
    
    
}

<style>
    .senderStyle{
        margin-left:auto;
    }
</style>


@code {
    //For left side
    private AuthenticationState? authState;
    private ApplicationUser? CurrentUser { get; set; } = new();
    private ApplicationUser? Receiver { get; set; } = null;
    private ApplicationUser? Sender { get; set; } = new();
    private List<ApplicationUser>? Users { get; set; } = new();
    private string MessageText { get; set; } = "";
    private List<Message>? Messages { get; set; } = new();
    private bool sendbuttonDisabled = true;
    public string TextValue { get; set; } = "";
    public List<ApplicationUser> filteredUsers = new();

    //For Right Side
    private List<Message>? UserMessages { get; set; } = new();
    bool writeNewMessage { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Users = await db.Users.ToListAsync();
        CurrentUser = await UserManager.GetUserAsync(authState.User);
        Sender = await UserManager.GetUserAsync(authState.User);
        Messages = await MessageService.GetLatestMessagesForUser(CurrentUser);

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollMessages();
    }

    async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(MessageText))
        {
            var message = await ComposeMessage();
            if (message != null && Receiver != null)
            {
                var messageCollection = MongoService.GetCollection<Message>("Messages");
                await messageCollection.InsertOneAsync(message);
                MessageText = "";
                await MessageService.GetLatestMessagesForUser(CurrentUser);
                Messages = await MessageService.GetLatestMessagesForUser(CurrentUser);
                UserMessages = await MessageService.GetAllMessagesForUsers(CurrentUser, this.Receiver);
                await ScrollMessages();
            }
            else
            {
                return;
            }
        }
        else
        {
            return;
        }

    }

    async Task<Message> ComposeMessage()
    {
        var newMessage = new Message();
        newMessage.SenderID = Sender!.Id;
        newMessage.SenderName = Sender.FirstName == "" && Sender.LastName == "" ? Sender.Email : Sender.LastName + " " + Sender.FirstName;
        newMessage.ReceiverID = Receiver!.Id;
        newMessage.ReceiverName = Receiver.FirstName == "" && Receiver.LastName == "" ? Receiver.Email : Receiver.LastName + " " + Receiver.FirstName;
        newMessage.MessageText = this.MessageText;
        return newMessage;

    }

    async Task UserMessage(Message message)
    {
        if (message.ReceiverID == CurrentUser.Id)
        {
            Receiver = await db.Users.FindAsync(message.SenderID);
        }
        else
        {
            Receiver = await db.Users.FindAsync(message.ReceiverID);
        }
    }

    private async Task ScrollMessages()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "messages");
    }

    private void filterUser()
    {
        if (!string.IsNullOrEmpty(TextValue)) filteredUsers = Users.Where(x => x.Email.ToLower().Contains(TextValue.ToLower())).ToList();
        else filteredUsers = null;

    }
}
