@rendermode InteractiveServer
@using BuildMasterPro.Services
@using BuildMasterPro.Data
@using System.ComponentModel
@using Microsoft.AspNetCore.Components
@inject ProjectService ProjectService
@inject NavigationManager NavManager
@inject UserService userService


<MudThemeProvider/>

@* <div class="main-container">
    @if(ProjectService.CurrentProject != null)
    {
        <button @onclick="@HandleProjectClick">
            <svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'>
                <path d='M3 18C1.34315 18 0 16.6569 0 15V7.60555C0 6.60249 0.501303 5.6658 1.3359 5.1094L7.3359 1.1094C8.3436 0.437602 9.6564 0.437602 10.6641 1.1094L16.6641 5.1094C17.4987 5.6658 18 6.60249 18 7.60555V15C18 16.6569 16.6569 18 15 18H14.25C12.5931 18 11.25 16.6569 11.25 15V13.25C11.25 12.0074 10.2426 11 9 11C7.75736 11 6.75 12.0074 6.75 13.25V15C6.75 16.6569 5.40685 18 3.75 18H3Z' fill='#121114' />
            </svg>
            Home
        </button>
    }
    else
    {
        <a></a>
    }
    <div class="logo-area">
        <div class="logo-container">
            <img id="logo" class="logo mr-2" src="/images/BlocksLogo.svg" />
            <h4 class="logo-text">BuildMaster <span style="color: #5A3E9F">Pro</span></h4>
        </div>
    </div>
    <div class="profile-container">
        <a href=""><img id="notification" class="notification" src="/images/NotifcationsIcon.png"/></a>
        @if(CurrentUser != null)
        {
            <MudButton>
                <ChildContent>
                    <MudAvatar><MudImage Src="@CurrentUser.ProfilePictureUrl" /></MudAvatar>
                    <MudText>@(string.IsNullOrEmpty(CurrentUser.FirstName) ? CurrentUser.Email : string.Concat(CurrentUser.FirstName, " ", CurrentUser.LastName))</MudText>
                </ChildContent>
            </MudButton>
        }
        
    </div>
</div> *@
<MudStack Class="pt-1 pb-1 ps-8 pe-8" Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Style="width:100%;height:100%;">
    <MudSpacer></MudSpacer>
    <div class="logo-area">
        <div class="logo-container">
            <img id="logo" class="logo mr-2" src="/images/BlocksLogo.svg" />
            <h4 class="logo-text">BuildMaster <span style="color: #5A3E9F">Pro</span></h4>
        </div>
    </div>
    <MudSpacer></MudSpacer>
    <MudIconButton Icon="@Icons.Material.Outlined.Notifications"/>
    <div style="width:max-content;">
        <MudButton OnClick="GoToProfile" Variant="Variant.Filled" Class="MainBG" Style="border-radius:40px;height:40px;">
            <ChildContent>
                <MudAvatar Class="me-2" Size="Size.Small"><MudImage Style="width:100%;" Src="@CurrentUser.ProfilePictureUrl" /></MudAvatar>
                <MudText>@(string.IsNullOrEmpty(CurrentUser.FirstName) ? CurrentUser.Email : string.Concat(CurrentUser.FirstName, " ", CurrentUser.LastName))</MudText>
            </ChildContent>
        </MudButton>
    </div>
    
</MudStack>

@code {
    private ApplicationUser? CurrentUser { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        ProjectService.PropertyChanged += HandlePropertyChanged;
        ProjectService.RegisterListener(StateHasChanged);
        CurrentUser = await userService.GetCurrentUserAsync();
    }
    private void HandlePropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(ProjectService.CurrentProject))
        {
            InvokeAsync(StateHasChanged); // Trigger re-render
        }
    }
    private void HandleProjectClick()
    {
        ProjectService.CurrentProject = null;
        InvokeAsync(StateHasChanged); // Ensure the UI updates after setting null
        NavManager.NavigateTo("");
    }
    public void Dispose()
    {
        ProjectService.PropertyChanged -= HandlePropertyChanged;
        ProjectService.UnregisterListener(StateHasChanged);
    }
    private void GoToProfile()
    {
        NavManager.NavigateTo($"/user/details?userid={CurrentUser.Id}");
    }

}
