@rendermode InteractiveServer
@using BuildMasterPro.Services
@using BuildMasterPro.Data
@using System.ComponentModel
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@inject ProjectService ProjectService
@inject NavigationManager NavManager
@inject UserService userService
@inject AuthenticationStateProvider auth
@inject NavigationManager NavigationManager
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Identity.SignInManager<ApplicationUser> SignInManager
@inject IHttpContextAccessor HttpContextAccessor

<MudThemeProvider/>

@* <div class="main-container">
    @if(ProjectService.CurrentProject != null)
    {
        <button @onclick="@HandleProjectClick">
            <svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'>
                <path d='M3 18C1.34315 18 0 16.6569 0 15V7.60555C0 6.60249 0.501303 5.6658 1.3359 5.1094L7.3359 1.1094C8.3436 0.437602 9.6564 0.437602 10.6641 1.1094L16.6641 5.1094C17.4987 5.6658 18 6.60249 18 7.60555V15C18 16.6569 16.6569 18 15 18H14.25C12.5931 18 11.25 16.6569 11.25 15V13.25C11.25 12.0074 10.2426 11 9 11C7.75736 11 6.75 12.0074 6.75 13.25V15C6.75 16.6569 5.40685 18 3.75 18H3Z' fill='#121114' />
            </svg>
            Home
        </button>
    }
    else
    {
        <a></a>
    }
    <div class="logo-area">
        <div class="logo-container">
            <img id="logo" class="logo mr-2" src="/images/BlocksLogo.svg" />
            <h4 class="logo-text">BuildMaster <span style="color: #5A3E9F">Pro</span></h4>
        </div>
    </div>
    <div class="profile-container">
        <a href=""><img id="notification" class="notification" src="/images/NotifcationsIcon.png"/></a>
        @if(CurrentUser != null)
        {
            <MudButton>
                <ChildContent>
                    <MudAvatar><MudImage Src="@CurrentUser.ProfilePictureUrl" /></MudAvatar>
                    <MudText>@(string.IsNullOrEmpty(CurrentUser.FirstName) ? CurrentUser.Email : string.Concat(CurrentUser.FirstName, " ", CurrentUser.LastName))</MudText>
                </ChildContent>
            </MudButton>
        }
        
    </div>
</div> *@
<MudStack Class="pt-1 pb-1 ps-8 pe-8" Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Style="width:100%;height:100%;">
    <MudSpacer></MudSpacer>
    <div class="logo-area">
        <div class="logo-container">
            <img id="logo" class="logo mr-2" src="/images/BlocksLogo.svg" />
            <h4 class="logo-text">BuildMaster <span style="color: #5A3E9F">Pro</span></h4>
        </div>
    </div>
    <MudSpacer></MudSpacer>
    <MudIconButton Icon="@Icons.Material.Outlined.Notifications"/>
        <MudButton OnClick="GoToProfile" Variant="Variant.Outlined" Class="TransparentBG" Style="border-radius:40px;height:40px;z-index:11;color:gray;border-color:gray;">
            <ChildContent>
                <MudAvatar Class="me-2" Size="Size.Small"><MudImage Style="width:100%;" Src="@CurrentUser.ProfilePictureUrl" /></MudAvatar>
                <MudText>@(string.IsNullOrEmpty(CurrentUser.FirstName) ? CurrentUser.Email : string.Concat(CurrentUser.FirstName, " ", CurrentUser.LastName))</MudText>
            </ChildContent>
        </MudButton>
        <MudIconButton OnClick="Logout" Icon="@Icons.Material.Outlined.Logout"/>
        @* @if (_open)
        {
            <MudPaper @ref="popOver" Class="pt-8" Style="position:absolute;top:50%;left:0;width:100%;z-index:10;border-radius:0 0 30px 30px;overflow:hidden;">
                <MudButton OnClick="GoToProfile" Class="ml-auto mr-n3 mb-1 mud-width-full" StartIcon="@Icons.Material.Outlined.Person" Style="height:50px;">
                    Profile
                </MudButton>
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <MudButton ButtonType="ButtonType.Submit" Class="ml-auto mr-n3 mb-1 mud-width-full" StartIcon="@Icons.Material.Outlined.Logout" Style="height:50px;">
                        Log Out
                    </MudButton>
                </form>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
                <MudButton OnClick="Logout" Class="ml-auto mr-n3 mb-1 mud-width-full" StartIcon="@Icons.Material.Outlined.Logout" Style="height:50px;">
                    Log Out
                </MudButton>
            </MudPaper>
        }
         *@
    
</MudStack>

@code {
    private ApplicationUser? CurrentUser { get; set; } = new();
    MudPaper popOver;
    private string? currentUrl;
    private string AntiforgeryToken;
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    protected override async Task OnInitializedAsync()
    {
        ProjectService.PropertyChanged += HandlePropertyChanged;
        ProjectService.RegisterListener(StateHasChanged);
        CurrentUser = await userService.GetCurrentUserAsync();

        currentUrl = NavManager.ToBaseRelativePath(NavManager.Uri);
        NavManager.LocationChanged += OnLocationChanged;
    }
    private void HandlePropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(ProjectService.CurrentProject))
        {
            InvokeAsync(StateHasChanged); // Trigger re-render
        }
    }
    private void HandleProjectClick()
    {
        ProjectService.CurrentProject = null;
        InvokeAsync(StateHasChanged); // Ensure the UI updates after setting null
        NavManager.NavigateTo("");
    }
    public void Dispose()
    {
        ProjectService.PropertyChanged -= HandlePropertyChanged;
        ProjectService.UnregisterListener(StateHasChanged);
    }
    private void GoToProfile()
    {
        NavManager.NavigateTo($"/user/details?userid={CurrentUser.Id}");
    }

    //For PopOver
    private bool _open;

    private void ToggleOpen() => _open = !_open;
    private async Task Logout()
    {
        // await Task.Yield(); // This ensures the response cycle is completed
        var httpContext = HttpContextAccessor.HttpContext;

        // if (httpContext != null)
        // {
        //     await httpContext.SignOutAsync();
        //     NavManager.NavigateTo("/account/login");
        // }
        NavManager.NavigateTo("/Account/logout");
        //await signInManager.SignOutAsync();
        //NavigationManager.NavigateTo("/", forceLoad: true);
    }
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

}
