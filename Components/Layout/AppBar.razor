@rendermode InteractiveServer
@using BuildMasterPro.Services
@using System.ComponentModel
@using Microsoft.AspNetCore.Components
@inject ProjectService ProjectService
@inject NavigationManager NavManager

<MudThemeProvider/>

<MudPaper Elevation="0" Class="TransparentBG" Style="margin:0 0 0 1.5rem;">
    <MudAppBar Elevation="0" Color="Color.Transparent" Fixed="false">
        <MudIconButton Edge="Edge.Start" Class="d-flex flex-column justify-center align-center" Style="padding:4px;">
            <ChildContent>
                <MudImage Style="margin:auto; width:35px;height:35px;" Src="/images/BlocksLogo.svg"/>
            </ChildContent>
        </MudIconButton>
        <MudTextField T="string" Margin="Margin.Dense" Style="max-width:400px;max-height:35px;border-radius:30px;background-color:lightgray;border:none;" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" />
    </MudAppBar>
</MudPaper>


@code {
    protected override async Task OnInitializedAsync()
    {
        ProjectService.PropertyChanged += HandlePropertyChanged;
        ProjectService.RegisterListener(StateHasChanged);
    }
    private void HandlePropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(ProjectService.CurrentProject))
        {
            InvokeAsync(StateHasChanged); // Trigger re-render
        }
    }
    private void HandleProjectClick()
    {
        ProjectService.CurrentProject = null;
        InvokeAsync(StateHasChanged); // Ensure the UI updates after setting null
        NavManager.NavigateTo("");
    }
    public void Dispose()
    {
        ProjectService.PropertyChanged -= HandlePropertyChanged;
        ProjectService.UnregisterListener(StateHasChanged);
    }

}
