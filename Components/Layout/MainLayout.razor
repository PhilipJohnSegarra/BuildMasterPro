@inherits LayoutComponentBase
@using Syncfusion.Blazor.Navigations
@using BuildMasterPro.Data
@inject BuildMasterPro.Data.ApplicationDbContext context
@using Microsoft.EntityFrameworkCore

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Dense="@_dense" class="SecondaryBG">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" class="PrimaryText" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/MudBlazor/MudBlazor" Target="_blank" />
    </MudAppBar>
    <MudDrawer @bind-Open="@_open" ClipMode="_clipMode" Breakpoint="@_breakpoint" Elevation="1" Variant="@DrawerVariant.Mini">
        <MudNavMenu>
            
            <!--Use the property ActiveClass="" to change the appearance when clicked-->
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home" Href="/" @ref="_link" Style="margin:1rem 0 0 0">Home</MudNavLink>
            <hr style="display:@displayP;"/>
            @* <p style="margin:0 0 0 1rem;display:@displayP;">Choose workspace</p> *@
            @* <span style="display:@displayP;">
                <MudExpansionPanels Elevation="0">
                    <MudExpansionPanel Text="Workspaces">
                        <MudNavLink Match="NavLinkMatch.All" Icon="material-symbols-outlined/square_foot" Href="/projects" @ref="_link2">Projects</MudNavLink>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </span> *@
            <span style="display:@displayP;">
                <MudNavGroup Title="Workspaces" Icon="@Icons.Material.Outlined.Work" Expanded="true">
                    @* <MudNavLink Match="NavLinkMatch.All" Icon="material-symbols-outlined/square_foot" Href="/projects" @ref="_link2">Projects</MudNavLink> *@
                    @foreach (Project project in Projects)
                    {

                        <a href="/projects/details?projectid=@(project.ProjectId.ToString())">
                            <MudNavLink Match="NavLinkMatch.All" Icon="" @ref="_link2">@project.ProjectName</MudNavLink>
                        </a>
                    }
                </MudNavGroup>
            </span>
            
            @* <span style="display:@displayMD;">
                <MudNavLink Match="NavLinkMatch.All" Icon="material-symbols-outlined/square_foot" Href="/projects" @ref="_link2">Projects</MudNavLink>
                <MudNavLink Match="NavLinkMatch.All" Icon="material-symbols-outlined/square_foot" Href="/projects" @ref="_link2">Projects</MudNavLink>
                <MudNavLink Match="NavLinkMatch.All" Icon="material-symbols-outlined/square_foot" Href="/projects" @ref="_link2">Projects</MudNavLink>
            </span> *@
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Add" Href="/projects/create" @ref="_link2"
                        Style="border:1px solid black;border-radius:5px;width:95%;margin:1rem auto 1rem auto;" >
                New Workspace
            </MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _open = false;
    private bool _dense = false;
    private Breakpoint _breakpoint = Breakpoint.Md;
    private DrawerClipMode _clipMode = DrawerClipMode.Always;
    private MudNavLink _link;
    private MudNavLink _link2;
    private string displayP = "none";
    private string displayMD = "block";
    private List<Project> Projects { get; set; } = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && _link != null || _link2 != null)
        {
            _link.ActiveClass = "PrimaryText";
            _link2.ActiveClass = "PrimaryText";
            StateHasChanged(); // Refresh the UI to apply changes
        }
    }

    protected async override Task OnInitializedAsync()
    {
        Projects = await context.Project.ToListAsync();
    }

    private void HoveredState()
    {
        _link.ActiveClass = "ContrastText";
        _link2.ActiveClass = "ContrastText";
    }

    private void ToggleDrawer()
    {
        _open = !_open;
        if(_open == true)
        {
            displayP = "block";
            displayMD = "none";
        }
        else
        {
            displayP = "none";
            displayMD = "block";
        }
        StateHasChanged();
    }
}


